---
title: "1_organize_data"
author: "Shayna A. Sura"
format: html
editor: source
---

# Organize SEAMAP Trawl Data for Analysis

### load necessary packages

```{r load packages}
#| echo: false

library(tidyverse) # includes and loads the packages listed below
# library(readr)
# library(tidyr)
# library(dplyr)
# library(ggplot2)
# library(lubridate)

library(here) # helps with paths for files
library(arsenal)

# library(scales)
# library(ggbeeswarm)

```

### function to load multiple .csv files at once

```{r function to load csv files}
#| echo: false

mass.csv.in<-function(path){

  #Retrieving the file names of csv files in designated path
  temp<-dir(path=path, pattern="*.csv", full.names = FALSE) %>% substr(0,nchar(.)-4)

  #Subtracting files from the list which are already loaded
  temp<-setdiff(dir(path = path, pattern = ".csv"), ls(.GlobalEnv))

  #Return message if no files need to be loaded
  if(length(temp)==0){return("ALL FILES ALREADY LOADED")}

  #Loading files
  for (i in 1:length(temp)) {
    assign(temp[i], read_csv(paste(path,temp[i], sep = "")), pos = ".GlobalEnv")
    print("Files Loaded")
  }
}

```

### load SEAMAP trawl data

```{r load SEAMAP trawl data from .csv files}
#| echo: false
#| message: false

mass.csv.in(path = "data/seamap_trawls/")

# CRUISES.csv <- read_csv("data/seamap_trawls/CRUISES.csv")

```

### exploring SEAMAP trawl data files

```{r data exploration}
#| echo: false
#| eval: false


glimpse(BGSREC.csv)
summary(BGSREC.csv)

glimpse(NEWBIOCODESBIG.csv)


glimpse(STAREC.csv)
glimpse(CRUISES.csv)


sort(unique(CRUISES.csv$YR))

unique(STAREC.csv$HAULVALUE)
summary(STAREC.csv$HAULVALUE)


which(STAREC.csv$HAULVALUE != "G")
length(which(STAREC.csv$HAULVALUE != "G"))


length(which(STAREC.csv$HAULVALUE == "B"))
length(which(STAREC.csv$HAULVALUE == "G"))



head()
unique()
colnames()

```




## Cleaning the SEAMAP Trawl Data

### BIOCODES01182923.csv
- category 1 is for fish (previously, category 3 was for fish)


### interesting that the new biocodes csv file does not have a column for common names...do I want to join that information in at some point? will need to pull it from the previous NEWBIOCODESBIG.csv file


```{r retrieving taxonomic names to join to biological data}

# make a new df to easily join with the biological data and to remove extra columns I don't need.
taxa_names <- BIOCODES01182023.csv %>%
  filter(CATEGORY == 1) %>% 
  select(BIOCODE, CIU_BIOCODE, TAXON, RANK, UPDATED_TAXON) %>% 
  mutate(new_TAXON = case_when((UPDATED_TAXON != "NA") ~ UPDATED_TAXON, .default = TAXON)) %>% 
  rename(BIO_BGS = BIOCODE)

taxa_names_slim <- taxa_names %>% 
  select(BIO_BGS, CIU_BIOCODE, RANK, new_TAXON)


# # check for duplicated entries for the Biocodes, which will create extra entries when I join the scientific names to the biological data
# which(duplicated(taxa_names$new_TAXON))
# which(duplicated(taxa_names$BIO_BGS))
# # 275 and 10015 are duplicated BIO_BGS codes in the taxa_names dataframe
# 
# 
# # check the rows that have duplicates to retrieve the Biocodes for these duplicated rows
# taxa_names[4074:4079,]
# taxa_names[275,] #BIO_BGS is 170026003
# taxa_names[10015,] #BIO_BGS is 300000000
# 
# # find all the entries with the biocodes that are duplicated and check surrounding biocodes
# filter(taxa_names, BIO_BGS == 170026003)
# 
# 
# # find all the entries with the two scientific names for this biocode to see if there's another biocode associated with either of these species
# filter(taxa_names, TAXON == "ANTHIAS WOODSI")
# filter(taxa_names, TAXON == "ANTHIAS TENUIS")
# # ANTHIAS WOODSI has 2 different biocodes assigned to it, while ANTHIS TENUIS only has 1.


```



```{r subsetting CRUISES and STAREC data}

# subset CRUISES
year_data <- CRUISES.csv %>% 
  select(CRUISEID, YR)

# checking the values in the YR column to make sure there aren't any weird ones that might need to be fixed
unique(year_data$YR) # data from 1982 - 2023
length(unique(year_data$YR)) # 42 years of data


# subset STAREC
small_starec_data <- STAREC.csv %>% 
  select(STATIONID, CRUISEID, CRUISE_NO, DEPTH_SSTA, MO_DAY_YR, DECSLAT, DECSLON, DECELAT, DECELON)

```

## Organizing SEAMAP Trawl Data

1.  Filter out the invertebrates - keep only those data with a CATEGORY value of 3.
2.  Add in the full scientific name for the fishes collected through the BIO_BGS variable in BGSREC to the CODE variable in the NEWBIOCODESBIG.csv and pull the TAXONOMIC and the Common_name variables.
3.  Link the data to year it was collected through the CRUISEID and YR variable in CRUISES.csv
4.  Link the data to a specific date it was collected through the CRUISEID and MO_DAY_YR variable in the STAREC.csv
5.  Link the data to the HAULVALUE code from the STAREC.csv file.

```{r data organizing}


# 1. filter out invertebrates and remove extra columns I don't need from BGSREC.csc
bio_data <- BGSREC.csv %>%
  filter(CATEGORY == 3) %>%
  select(-CNT, -SAMPLE_BGS, -NODC_BGS, -TAXONID, -INVRECID)



# 2. add the full scientific name for the fishes
bio_data <- bio_data %>% 
  left_join(taxa_names_slim, join_by(BIO_BGS))



# 3. and 4. add the year for the biological catch data and add the specific month and day.
bio_data <- bio_data %>% 
  left_join(year_data, join_by(CRUISEID)) %>% 
  left_join(small_starec_data, join_by(STATIONID))


## checking to make sure the bio_data dataframe contains data up to 2023
max(bio_data$CRUISEID.x)
max(BGSREC.csv$CRUISEID)


# ## looking at the 2021, 2022, and 2023 data to figure out why it's not showing up in the bio_data later one...
# data_2023 <- year_data %>% 
#   filter(YR == "2023"| YR == "2022" |YR == "2021" | YR == "2020")
# 
# small_starec_2023 <- small_starec_data %>% 
#   filter(MO_DAY_YR > "2023-01-01")

# small_starec_2021 <- small_starec_data %>% 
#   filter(MO_DAY_YR > "2021-01-01")



## check that the CRUISEID and CRUISE_NO columns from the bio_data and the small_starec_data match
length(which((bio_data$CRUISEID.x == bio_data$CRUISEID.y) == "TRUE"))
length(which((bio_data$CRUISEID.x == bio_data$CRUISEID.y) == "FALSE")) # these 2 columns match

# ## the CRUISE_NO variable from STAREC.csv -> small_starec_data was stored as character values instead of numeric. Need to convert the CRUISE_NO variable to numeric for it to match the bio_data CRUISE_NO variable.
# length(which((bio_data$CRUISE_NO.x == as.numeric(bio_data$CRUISE_NO.y)) == "TRUE"))
# length(which((bio_data$CRUISE_NO.x == as.numeric(bio_data$CRUISE_NO.y)) == "FALSE")) # these 2 columns match
# ## december 15, 2023 - why doesn't these 2 columns match anymore??

# sort(unique(bio_data$CRUISE_NO.x))
# sort(unique(bio_data$CRUISE_NO.y))
# summary(bio_data)

## December 15, 2023 - after reloading these data, don't need to convert one column to numeric. They are both character columns now, and they do match each other.
length(which((bio_data$CRUISE_NO.x == (bio_data$CRUISE_NO.y)) == "TRUE"))
length(which((bio_data$CRUISE_NO.x == (bio_data$CRUISE_NO.y)) == "FALSE"))



## remove the extra CRUISEID and CRUISE_NO columns to streamline data table
bio_data <- bio_data %>% 
  select(-CRUISEID.y, -CRUISE_NO.y) %>% 
  rename(CRUISEID = CRUISEID.x) %>% 
  rename(CRUISE_NO = CRUISE_NO.x)

## relocate columns in bio_data to have important variables towards the left side of the data table
# bio_data <- bio_data %>% 
#   relocate()




# 5. add the HAULVALUE codes
which(bio_data$STATIONID == 173641)
# the row in STAREC.csv that wasn't loaded properly into R is not in my biological data set, so I'm not going to worry about this.

haul_values <- STAREC.csv %>% 
  select(STATIONID, HAULVALUE)

bio_data <- bio_data %>% 
  left_join(haul_values, join_by(STATIONID))


## checking the amounts of the different HAULVALUE codes.
unique(bio_data$HAULVALUE)
length(which(bio_data$HAULVALUE == "G"))   # 361,748 
length(which(bio_data$HAULVALUE == "B"))   # 41
length(which(is.na(bio_data$HAULVALUE) == TRUE))   # 221,882   # 222,994 on April 18, 2024

361748+41+221882  # sum is 583,671 which is the length of bio_data
361748+41+222994  # sum is 584,783 which is the length of bio_data on April 18, 2024

# bad_hauls <- bio_data %>% 
#   filter(HAULVALUE != "G")
# 
# bad_hauls_2 <- bio_data %>% 
#   filter(HAULVALUE != "G" | is.na(HAULVALUE) == TRUE)



# head(bio_data)

```

### BAD TRAWLS in Biological Data

1986 (29 data points)

-   CRUISEID = 76
-   STATIONID = 85594
-   CRUISE_NO = 160
-   P_STA_NO = 44108

2005 (2 data points)

-   CRUISEID = 632
-   STATIONID = 82569
-   CRUISE_NO = 267
-   P_STA_NO = 90

2005 (10 data points)

-   CRUISEID = 626
-   TATIONID = 82707
-   CRUISE_NO = 55
-   P_STA_NO = 41



```{r export clean bio_data}

write_csv(bio_data, file = "data/clean_data/bio_data.csv")


```












# OLD CODE FOR CLEANING SEAMAP DATA - shouldn't have to do this anymore because have an updated file with CIU_BIOCODES


1.  NEWBIOCODESBIG.csv file has 2 biocodes/codes that are duplicated for different taxa.

-   CODES: 170026003 & 300000000
-   I am ignoring the 300000000 code because that's for invertebrates and not applicable for my research question.
-   I am changing one occurrence of 17002600***3*** to 17002600***4*** to match the species scientific name with the other occurrence of 170026004.
    -   170026003 is listed for both ANTHIAS WOODSI and ANTHIAS TENUIS
    -   170026004 is also listed for ANTHIAS WOODSI, but there's no other biocode associated with ANTHIAS TENUIS.
-   So I am changing the occurrence of 170026003 that says ANTHIAS WOODSI to the biocode 170026004.
-   Also, the other occurrence of ANTHIAS WOODSI does not have a common name associated with it, but there is a common name, so I'm going to add that in so both occurrences of ANTHIAS WOODSI will match now. I am also changing the Key1 ID values to the first Key1 value associated with ANTHIAS WOODSI, which is Key1 = 504.

**-   I am making these changes to a new data frame (taxa_names), and keeping the NEWBIOCODESBIG.csv file AS IS.**

```{r taxanomic names data cleaning}

# # make a new df to easily join with the biological data and to remove extra columns I don't need.
# taxa_names <- NEWBIOCODESBIG.csv %>% 
#   select(Key1, TAXONOMIC, CODE, common_name) %>% 
#   rename(BIO_BGS = CODE)
# 
# 
# # check for duplicated entries for the Biocodes, which will create extra entries when I join the scientific names to the biological data
# which(duplicated(taxa_names$BIO_BGS))
# # 275 and 10015 are duplicated BIO_BGS codes in the taxa_names dataframe
# 
# 
# # check the rows that have duplicates to retrieve the Biocodes for these duplicated rows
# taxa_names[275,] #BIO_BGS is 170026003
# taxa_names[10015,] #BIO_BGS is 300000000
# 
# # find all the entries with the biocodes that are duplicated and check surrounding biocodes 
# filter(taxa_names, BIO_BGS == 170026003)
# filter(taxa_names, BIO_BGS == 300000000) # this is for inverts so I'm going to ignore this now.
# 
# # find all the entries with the two scientific names for this biocode to see if there's another biocode associated with either of these species
# filter(taxa_names, TAXONOMIC == "ANTHIAS WOODSI")
# filter(taxa_names, TAXONOMIC == "ANTHIAS TENUIS")
# # ANTHIAS WOODSI has 2 different biocodes assigned to it, while ANTHIS TENUIS only has 1.
# 
# # check the surrounding biocodes (as another way to detect what's being duplicated and how to correct it)
# filter(taxa_names, BIO_BGS == 170026004)
# filter(taxa_names, BIO_BGS == 170026002)
# 
# # change the entry for ANTHIAS WOODSI that has the wrong biocode associated with it
# taxa_names <- taxa_names %>% 
#   mutate(BIO_BGS = case_when((BIO_BGS == 170026003 & TAXONOMIC == "ANTHIAS WOODSI") ~ 170026004, .default = BIO_BGS),
#          common_name = case_when((BIO_BGS == 170026004 & TAXONOMIC == "ANTHIAS WOODSI") ~ "swallowtail bass", .default = common_name),
#          Key1 = case_when((BIO_BGS == 170026004 & TAXONOMIC == "ANTHIAS WOODSI") ~ 504, .default = Key1))
# 
# # double checking that the above mutate worked as expected.
# filter(taxa_names, TAXONOMIC == "ANTHIAS WOODSI")
# filter(taxa_names, BIO_BGS == 170026003)
# 
# 
# # check for duplicated entries for the Biocodes, which will create extra entries when I join the scientific names to the biological data
# which(duplicated(taxa_names$BIO_BGS))
# # 10015 and 10331 are duplicated BIO_BGS codes in the taxa_names dataframe
# 
# taxa_names[10331,] #this is the updated entry for ANTHIAS WOODSI, which is now duplicated because we made the two entries match each other exactly. This will be okay for the join below.

```


2. There are some misspelled taxonomic names that need to be fixed.

- ALUTERUS HEUDELOTII is misspelled as ALUTERUS HEUDELOTTI. Each spelling also has their own unique biocode.


```{r fixing misspelling of Aluterus heudelotii}

# # checking for occurrences of misspellings of this fish species (which I identified when making my fish species list in script "3_geographic_centers")
# filter(taxa_names, TAXONOMIC == "ALUTERUS HEUDELOTII") # BIO_BGS code is 189040407
# filter(taxa_names, BIO_BGS == 189040407)
# 
# filter(taxa_names, TAXONOMIC == "ALUTERUS HEUDELOTTI")  # BIO_BGS code is 189040401
# 
# ## check for how many occurrences there are of this fish species (and misspellings) in the bio data set
# filter(BGSREC.csv, BIO_BGS == 189040407) # 120 instances of this biocode
# filter(BGSREC.csv, BIO_BGS == 189040401) # 351 instances of this biocode
# 
# 
# # change the entries for ALUTERUS HEUDELOTII in BGSREC.csv file that have the wrong biocode and taxonomic spelling associated with it. Also, add in the common name from FishBase.
# rev_BGSREC.csv <- BGSREC.csv %>% 
#   mutate(BIO_BGS = case_when((BIO_BGS == 189040401) ~ 189040407, .default = BIO_BGS))
# 
# 
# ## check for how many occurrences there are of this fish species (and misspellings) in the revised bio data set
# filter(rev_BGSREC.csv, BIO_BGS == 189040407) # 471 instances of this biocode
# filter(rev_BGSREC.csv, BIO_BGS == 189040401) # 0 instances of this biocode
# 
# 
# # don't actually need to change the TAXONOMIC entries for Aluterus heudelotii in the taxa_names file because it won't match to anything in the BGSREC.csv file anymore
# # can still update the taxa_names dataframe to include a common name for this fish species, though
# taxa_names <- taxa_names %>% 
#   mutate(common_name = case_when((BIO_BGS == 189040407 & TAXONOMIC == "ALUTERUS HEUDELOTII") ~ "dotterel filefish", .default = common_name))
# 
# 
# # check for updates in the taxa_names dataframe
# filter(taxa_names, TAXONOMIC == "ALUTERUS HEUDELOTII") # yes, now has a common name associated with it
# filter(taxa_names, TAXONOMIC == "ALUTERUS HEUDELOTTI") # remains are before without a common name associated with it

```





