---
title: "2_map_data"
author: "Shayna A. Sura"
format: html
editor: source
---

```{r load packages}
#| echo: false
#| message: false

library(tidyverse) # includes and loads the packages listed below
# library(readr)
# library(tidyr)
# library(dplyr)
# library(ggplot2)
# library(lubridate)

library(here) # helps with paths for files

# libraries for spatial data & animating it...
library(maps)
library(ggmap)
library(gganimate)
library(gifski) # for gif output
library(av) # for video output
library(png)
library(tools)

# not sure I need these libraries for what I'm trying to do.
# library(terra)
# library(geodata)
# library(predicts)

```


```{r}
#| echo: false

## Accessing objects from other Quarto documents in this R Project???

### Not sure this is possoible to do. Might be better to export the clean data files from my other quarto document and then reload / import them into this quarto document...
```




```{r accessing data from 1_organize_data QMD file}
#| echo: false
#| 
# setwd("R_scripts/")
# 
# source("1_organize_data.qmd", local = FALSE)
# 
# getwd()

```



```{r reading in cleaned bio data}
#| echo: false
#| message: false

bio_data_clean <- read_csv(file = "data/clean_data/bio_data.csv")

# head(bio_data_clean)

```

## obtain bounding coordinates for making maps

```{r}
#| echo: false
#| message: false

# Determine geographic extent of our data
# use ceiling() and floor() to round up and down to the nearest integer

max_lat <- ceiling(max(bio_data_clean$DECSLAT))
min_lat <- floor(min(bio_data_clean$DECSLAT))
max_long <- ceiling(max(bio_data_clean$DECSLON))
min_long <- floor(min(bio_data_clean$DECSLON))

# geo_extent <- ext(x = c(min_long,
#                         max_long,
#                         min_lat,
#                         max_lat))

```



```{r obtain GoM map}
#| echo: false
#| message: false


gulf_of_mexico_info <- map_data("usa", region = ".")
world_base_map <- map_data("world", region = ".")
usa_state_borders <- map_data("state", region = ".")

# base_map <- ggplot(data = gulf_of_mexico_info,
#                    mapping = aes (x = long, y = lat, group = group)) +
#   geom_polygon() +
#   coord_quickmap(xlim = c(min_long, max_long),
#                  ylim = c(min_lat, max_lat)) +
#   theme_void()


base_map <- ggplot(data = world_base_map,
                   mapping = aes (x = long, y = lat, group = group)) +
  geom_polygon(color = "black",
               fill = "white") +
  geom_polygon(data = usa_state_borders,
               color = "black",
               fill = "white") + 
  # coord_quickmap(xlim = c(min_long, max_long),
  #                ylim = c(min_lat, max_lat)) +
  coord_quickmap(xlim = c(-97.7, -79.9),
                 ylim = c(24, 31)) +
  theme(panel.background = element_rect(fill = c("#CFEFFF")),
        panel.border = element_rect(fill = NA,
                                    color = "black")
        ) +
  labs(x = "Longitude",
       y = "Latitude")


# base_map

# theme_void().  #EBF9FF #B3E5FC

#             (left = -98.438,
#              bottom = 12.082,
#              right = -79.519,
#              top = 33.505)

```



```{r alt way of obtaining base maps}
#| echo: false
#| eval: false

## Use ggmap instead?

## HAVEN'T GOTTEN THIS WORKING YET - NEED TO REGISTER FOR AN API KEY FOR GOOGLE MAPS
## Google Maps requires this to be connected to a project and billing information.
## Stadia Maps also requires an API key, but doesn't require a credit card to obtain one. It is free to use for non-commercial and evaluation use.
### see help page for ?register_stadiamaps()
### Okay, maybe I don't want to use ggmap as the services now seem to be pretty restricted for free use and I don't want to be come reliant on Google Maps or Stadia Maps.



# Gulf of Mexico coordinates pulled from viewing it on(url: https://www.openstreetmap.org/export#map=6/23.221/-88.978)

# base_map_alt <- get_map(location = c(left = -98.438,
#                                      bottom = 12.082,
#                                      right = -79.519,
#                                      top = 33.505),
#                         # source = "osm",    # OSM is temporarily not supported
#                         source = "stadia",
#                         # location = c(-90, 26),
#                         # location = "Gulf of Mexico",
#                         maptype = "stamen_watercolor",
#                         crop = FALSE)


```



```{r subset of bio data to test mapping for 1 species overtime}
#| echo: false
#| message: false


lionfish_data <- bio_data_clean %>% 
  filter(GENUS_BGS == "PTEROIS")

# head(lionfish_data)


## need to add zeroes to the lionfish data for the years before it was detected and any years it wasn't detected when surveys were done.
survey_years <- data.frame("YR" = sort(unique(bio_data_clean$YR)))
# survey_years


## Do a right join to the survey_years work for adding zeroes to the lionfish_data to get the animation to show the blank years.
lionfish_data <- lionfish_data %>% 
  right_join(survey_years, join_by(YR))


## I'll probably want to fill in some of the info for each species when I do this because otherwise all the other columns are blank except for year in the dataframe. So if I have more than one species in there, it might not work? not sure right now....

```

```{r mapping lionfish data}
#| echo: false
#| warning: false
#| message: false

lionfish_map <- base_map +
  geom_point(data = lionfish_data,
             na.rm = FALSE,
             aes(x = DECSLON,
                 y = DECSLAT,
                 group = YR,
                 fill = YR),
             size = 2.5,
             shape = 21,
             color = "black",
             stroke = 0.5) +
    scale_fill_gradient(low = "#470887",
                       high = "#F4D6FF",
                       limits = c(1982, 2023),
                       breaks = c(1982, 1992, 2002, 2012, 2022),
                       labels = c(1982, 1992, 2002, 2012, 2022),
                       name = "Year") +
  theme(text = element_text(family = "Times",
                            size = 14),
        plot.title = element_text(face = "bold"),
        axis.title = element_text(size = 12,
                                  face = "bold"),
        axis.text = element_text(size = 10),
        legend.title = element_text(size = 12,
                                    face = "bold",
                                    hjust = 0.5),
        legend.text = element_text(size = 10))

                       # labels = c(1982, 1990, 2000, 2010, 2020, 2023))

# lionfish_map

lionfish_map_animated <- lionfish_map +
  transition_time(YR) +
  ggtitle('Lionfish Presence
          Year: {frame_time}',
          subtitle = 'Frame {frame} of {nframes}') +
  shadow_mark(alpha = 0.6,
              color = "darkgray",
              # fill = "lightgray",
              size = 1.5)

# num_years <- max(bio_data_clean$YR - min(bio_data_clean$YR)) + 1
# animate(lionfish_map_animated, nframes = num_years)

num_years <- max(lionfish_data$YR - min(lionfish_data$YR)) + 1
animate(lionfish_map_animated,
        nframes = num_years,
        fps = 2,
        duration = (num_years + 5)/2,
        end_pause = 5,
        height = 4,
        width = 6,
        units = "in",
        res = 300)

lionfish_map_animated


anim_save("plots/lionfish_map1_v2.gif")


# # to save as a video
# animate(lionfish_map_animated,
#         nframes = num_years,
#         fps = 2,
#         duration = (num_years + 5)/2,
#         end_pause = 5,
#         height = 4,
#         width = 6,
#         units = "in",
#         res = 300,
#         renderer = av_renderer())
# 
# anim_save("plots/lionfish_map2_v2.mpg")


```

## Mapping the species identified in [Fodrie et al. (2010)](https://onlinelibrary.wiley.com/doi/10.1111/j.1365-2486.2009.01889.x) tropicalization paper

### Species listed as contributing to / evidence of tropicalization in GOM:

#### Present in 2006-2007 when absent in 1970s

-   *Lutjanus synagris* (lane snapper)
-   *Epinephelus morio* (red grouper)
-   *Chaetodon ocellatus* (spotfin butterflyfish)
-   *Mycteroperca spp.* (grouper, non gag)
-   *Centropristis philadelphica* (rock sea bass)
-   *Fistularia tabacaria* (bluespotted cornetfish)
-   *Ocyurus chrysurus* (yellowtail snapper)
-   *Thalassoma bifasciatum* (bluehead wrasse)
-   *Abudefduf saxatilis* (sergeant major)
-   *Acanthuridae spp.* (surgeonfishes)
-   *Sparisoma viride* (stoplight parrotfish)

#### Large Increased Abundances from 1970s to 2006-2007

-   *Mycteroperca microlepsis* (gag grouper)
-   *Lutjanus griseus* (gray snapper)
-   *Nicholsina usta* (emerald parrotfish)

```{r function to automate gganimate of presence of various fish species}
#| echo: false
#| warning: false
#| message: false


# write a function to automate the gganimate of presence of different fish species...


# fish_tropical_maps <- function()


# Function to create a map/animation for a given fish species
fish_species_animation <- function(
                                   data,
                                   taxonomic_column,
                                   common_name_column,
                                   species_name,
                                   low_color = "#470887",  # Default low color
                                   high_color = "#F4D6FF"  # Default high color
                                   ) {
  # Subset data for the specified species
  species_data <- data %>% 
    filter(if_any(all_of(taxonomic_column), ~ toupper(.) == toupper(species_name)))
  
  # Check if there is data for the specified species
  if (nrow(species_data) == 0) {
    stop(paste("No data found for species:", species_name))
  }
  
  # Create survey years data frame
  survey_years <- data.frame("YR" = sort(unique(data$YR)))
  
  # Join survey years to the species data
  species_data <- right_join(species_data, survey_years, by = "YR")
  
  # Define color gradient for the species
  species_color_gradient <- scale_fill_gradient(
    low = low_color,
    high = high_color,
    limits = range(survey_years$YR),
    breaks = seq(min(survey_years$YR), max(survey_years$YR), by = 10),
    labels = seq(min(survey_years$YR), max(survey_years$YR), by = 10),
    name = "Year"
  )
  
  # # Create base map
  # base_map <- ggplot()  # Add your base map specifications here
  
  # Create ggplot object for the map
  plot <- base_map +
    geom_point(data = species_data,
               na.rm = FALSE,
               aes(x = DECSLON,
                   y = DECSLAT,
                   group = YR,
                   fill = YR),
               size = 2.5,
               shape = 21,
               color = "black",
               stroke = 0.5) +
    species_color_gradient
  
  # Create animation
  animation <- plot +
    transition_time(YR) +
    ggtitle(
      label = paste(substr(toupper(species_name), 1, 1),
                tolower(substr(toupper(species_name), 2, nchar(species_name))),
                " Presence",
                sep = ""
          ),
      subtitle = paste(
        toTitleCase(species_data[[common_name_column]][1]),
        "\nYear: {frame_time}\nFrame {frame} of {nframes}"
      )
    ) +
    shadow_mark(alpha = 0.6,
                color = "darkgray",
                size = 1.5)  +
    theme(text = element_text(family = "Times",
                              size = 14),
          plot.title = element_text(face = "bold"),
          axis.title = element_text(size = 12,
                                    face = "bold"),
          axis.text = element_text(size = 10),
          legend.title = element_text(size = 12,
                                      face = "bold",
                                      hjust = 0.5),
          legend.text = element_text(size = 10))
  
  num_years <- max(data$YR - min(data$YR)) + 1
  animation <- animate(animation,
                       nframes = num_years,
                       fps = 2,
                       duration = (num_years + 5)/2,
                       end_pause = 5,
                       height = 4,
                       width = 6,
                       units = "in",
                       res = 300)
  
  # Assign animation object to a variable with a name that includes the species name
  assign(paste("animation_", species_name, sep = ""), animation, envir = .GlobalEnv)
  
  # Return the animation object
  return(animation)
}


```



```{r testing function created above}
#| echo: false
#| warning: false
#| message: false

lionfish_function_animation <- fish_species_animation(
  data = bio_data_clean,
  taxonomic_column = "GENUS_BGS",
  common_name_column = "common_name",
  species_name = "PTEROIS"
)


# animation_PTEROIS

lionfish_function_animation


## testing with another fish species
red_grouper_function_animation <- fish_species_animation(
  data = bio_data_clean,
  taxonomic_column = "TAXONOMIC",
  common_name_column = "common_name",
  species_name = "Epinephelus morio",
  low_color = "#FADFE4",
  high_color = "#DB1133"
)

red_grouper_function_animation

anim_save("plots/red_grouper_map1.gif")



```

```{r testing with subsetted datasets}

lionfish_function_animation_2010_2022_summer <- fish_species_animation(
  data = yr2010_2022_m678_clean_bio_data,
  taxonomic_column = "new_TAXON",
  common_name_column = "new_TAXON",
  species_name = "PTEROIS VOLITANS"
)


# animation_PTEROIS

lionfish_function_animation_2010_2022_summer

```




### Examining the fish species that Will Heyman suggested.

 - king mackerel *Scomberomorus cavalla*
 - mahi *Coryphaena hippurus*
 - red grouper (examined above)
 - goliath grouper *Epinephelus itajara*
 - wahoo *Acanthocybium solandri*
 

```{r}
#| echo: false
#| eval: false

## SHAYNA - will need to run the 1_organize_data script to use the taxa_names table to check for various species ##

# check that these species are present in the data...

filter(taxa_names, TAXONOMIC == "SCOMBEROMORUS CAVALLA") # yes, found in the taxa names
filter(taxa_names, TAXONOMIC == "CORYPHAENA HIPPURUS") # yes, found in the taxa names, common name given as "dolphin"
filter(taxa_names, TAXONOMIC == "EPINEPHELUS ITAJARA") # yes, found in the taxa names
filter(taxa_names, TAXONOMIC == "ACANTHOCYBIUM SOLANDRI") # no, not found in the taxa names - check spelling and other possible scientific names

filter(taxa_names, common_name == "king mackerel") # no, not found in the taxa names
filter(taxa_names, common_name == "dolphin") # yes, found in the taxa names, common name given as "dolphin", but aka mahi mahi
filter(taxa_names, common_name == "goliath grouper") # yes, found in the taxa names

# searching for wahoo and other possible common names for it
filter(taxa_names, common_name == "wahoo") # no, not found in the common names - check spelling and other possible scientific names
filter(taxa_names, common_name == "atlantic wahoo") # not found
filter(taxa_names, common_name == "kinkfish") # not found
filter(taxa_names, common_name == "peto") # not found
filter(taxa_names, common_name == "guarapucu") # not found
filter(taxa_names, common_name == "ono") # not found
filter(taxa_names, common_name == "thazard batard") # not found

```




```{r king mackerel}
#| echo: false
#| message: false
#| warning: false


## testing with another fish species - king mackerel
king_mackerel_function_animation <- fish_species_animation(
  data = bio_data_clean,
  taxonomic_column = "TAXONOMIC",
  common_name_column = "common_name",
  species_name = "Scomberomorus cavalla",
  low_color = "lightgreen",
  high_color = "darkgreen"
)

king_mackerel_function_animation

anim_save("plots/king_mackerel_map1.gif")

```




```{r mahi / dolphin fish}
#| echo: false
#| message: false
#| warning: false


## testing with another fish species - mahi
mahi_function_animation <- fish_species_animation(
  data = bio_data_clean,
  taxonomic_column = "TAXONOMIC",
  common_name_column = "common_name",
  species_name = "Coryphaena hippurus",
  low_color = "lightyellow",
  high_color = "darkorange"
)

mahi_function_animation

anim_save("plots/mahi_map1.gif")

```



```{r goliath grouper}
#| echo: false
#| message: false
#| warning: false

# Epinephelus itajara

## testing with another fish species - mahi
goliath_grouper_function_animation <- fish_species_animation(
  data = bio_data_clean,
  taxonomic_column = "TAXONOMIC",
  common_name_column = "common_name",
  species_name = "Epinephelus itajara",
  low_color = "lightgray",
  high_color = "black"
)

goliath_grouper_function_animation

anim_save("plots/goliath_grouper_map1.gif")

```

