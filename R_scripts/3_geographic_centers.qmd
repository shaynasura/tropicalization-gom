---
title: "3_geographic_centers"
author: "Shayna A. Sura"
format: pdf
---



```{r setup}

library(tidyverse) # includes and loads the packages listed below
# library(readr)
# library(tidyr)
# library(dplyr)
# library(ggplot2)
# library(lubridate)

library(here) # helps with paths for files

library(purrr)

library(rvest) #for web scraping
library(xml2)
library(stringr)

```



```{r reading in cleaned bio data}
#| echo: false
#| message: false

bio_data_clean <- read_csv(file = "data/clean_data/bio_data.csv")

# head(bio_data_clean)

```


```{r lionfish data subset}

lionfish_data <- bio_data_clean %>% 
  filter(GENUS_BGS == "PTEROIS")

## need to add zeroes to the lionfish data for the years before it was detected and any years it wasn't detected when surveys were done.
survey_years <- data.frame("YR" = sort(unique(bio_data_clean$YR)))
# survey_years

## need to add zeroes to the lionfish data for the SURVEY STATIONS within each year where lionfish were NOT detected...


## Do a right join to the survey_years work for adding zeroes to the lionfish_data to get the animation to show the blank years.
# lionfish_data <- lionfish_data %>% 
#   right_join(survey_years, join_by(YR))

```



```{r calculate gCOB for lionfish}

# survey_years

cg <- data.frame(year = unique(lionfish_data$YR),
                 latitude = NA,
                 longitude = NA)

unique_years <- unique(lionfish_data$YR)

for(i in 1:length(unique(lionfish_data$YR))) {
  filtered_data <- filter(lionfish_data, YR == unique_years[i])
  
  # Check if the filtered dataset is not empty
  if(nrow(filtered_data) > 0) {
    cg$latitude[i] <- sum(filtered_data$DECSLAT * filtered_data$SELECT_BGS) / sum(filtered_data$SELECT_BGS)
    cg$longitude[i] <- sum(filtered_data$DECSLON * filtered_data$SELECT_BGS) / sum(filtered_data$SELECT_BGS)
  } else {
    # If the filtered dataset is empty, assign NA to latitude and longitude
    cg$latitude[i] <- NA
    cg$longitude[i] <- NA
  }
}


```



```{r function to calculate gCOB for species}

fish_calculate_gCOB <- function(data = bio_data_clean,
                                taxonomic_column = "TAXONOMIC",
                                common_name_column = "common_name",
                                species_name)
  {
  species_data <- data %>% 
    filter(if_any(all_of(taxonomic_column), ~ toupper(.) == toupper(species_name)))
  
  # Check if there is data for the specified species
  if (nrow(species_data) == 0) {
    stop(paste("No data found for species:", species_name))
  }
  
  # determine the specific years where fish appeared in trawl(s)
  unique_years <- unique(species_data$YR)


  # for loop to calculate gCOB latitude and longitude for each year when fish appeared in trawl(s)
  for(i in 1:length(unique(species_data$YR))) {
    filtered_data <- filter(species_data, YR == unique_years[i])

    # Check if the filtered dataset is not empty
    if(nrow(filtered_data) > 0) {
      cg$latitude[i] <- sum(filtered_data$DECSLAT * filtered_data$SELECT_BGS) / sum(filtered_data$SELECT_BGS)
      cg$longitude[i] <- sum(filtered_data$DECSLON * filtered_data$SELECT_BGS) / sum(filtered_data$SELECT_BGS)
    } else {
      # If the filtered dataset is empty, assign NA to latitude and longitude
      cg$latitude[i] <- NA
      cg$longitude[i] <- NA
    }}

  # Order the cg dataframe by time / years
  cg <- cg %>% arrange(year)

  # Assign the cg dataframe with gCOB values to a variable with a name that includes the species name
  assign(paste(species_name, "_gCOB", sep = ""), cg, envir = .GlobalEnv)

  # Return the cg dataframe
  return(cg)
  
}
  
  
  
  # 
  # cg <- list()  # Initialize an empty list to store data frames
  # 
  # for (i in 1:length(unique_years)) {
  #   filtered_data <- filter(species_data, YR == unique_years[i])
  #   if (nrow(filtered_data) > 0) {
  #     cg[[i]] <- data.frame(year = unique_years[i],
  #                            latitude = sum(filtered_data$DECSLAT * filtered_data$SELECT_BGS) / sum(filtered_data$SELECT_BGS),
  #                            longitude = sum(filtered_data$DECSLON * filtered_data$SELECT_BGS) / sum(filtered_data$SELECT_BGS))
  #   } else {
  #     cg[[i]] <- data.frame(year = unique_years[i],
  #                            latitude = NA,
  #                            longitude = NA)
  #   }
  # }
  # 
  # cg <- lapply(cg, function(x) x[order(x$year), ])  # Order each data frame by year
  # 
  # names(cg) <- species_name  # Assign the species name as the name of the list element
  # 
  # return(cg)
  
  
  
  
  
  
  
  # # initialize an empty list to store data frames
  # cg_list <- list()
  # 
  # # # initialize empty dataframe to hold gCOB values
  # # cg <- data.frame(year = unique(species_data$YR),
  # #                latitude = NA,
  # #                longitude = NA)
  # 
  # 
  # for (i in 1:length(unique_years)) {
  #   filtered_data <- filter(species_data, YR == unique_years[i])
  #   if (nrow(filtered_data) > 0) {
  #     cg <- data.frame(year = unique_years[i],
  #                      latitude = sum(filtered_data$DECSLAT * filtered_data$SELECT_BGS) / sum(filtered_data$SELECT_BGS),
  #                      longitude = sum(filtered_data$DECSLON * filtered_data$SELECT_BGS) / sum(filtered_data$SELECT_BGS))
  #   } else {
  #     cg <- data.frame(year = unique_years[i],
  #                      latitude = NA,
  #                      longitude = NA)
  #   }
  #   
  #   # store the result with the species name as its name in the list
  #   cg_list[[species_name]] <- cg  # Add the data frame to the list
  # }
  # 
  # cg_list <- lapply(cg_list, function(x) x[order(x$year), ])  # Order each data frame by year
  # 
  # return(cg_list)
  
  
  
  
#   
# }


```




```{r testing the gCOB function with individual species}

## testing the function

fish_calculate_gCOB(bio_data_clean,
                    taxonomic = "GENUS_BGS",
                    species_name = "Pterois")


fish_calculate_gCOB(bio_data_clean,
                    taxonomic = "TAXONOMIC",
                    species_name = "Epinephelus morio")

```



```{r extract unique fish species names}

# Extract unique fish species taxonomic names - ONLY fishes identified to species level - returns a dataframe
## need to remove the occurrence of CALAMUS PRORIDENS/NODOSUS in the fish species list because it causes problems when trying to scrape data from FishBase

species_df <- unique(bio_data_clean[grep("\\b\\w+\\s\\w+\\b", bio_data_clean$TAXONOMIC), "TAXONOMIC"]) %>% 
  filter(TAXONOMIC != "CALAMUS PRORIDENS/NODOSUS") %>% 
  arrange(TAXONOMIC)


dim(species_df)  ## returns 846 unique taxonomic names


species_list <- species_df$TAXONOMIC  # converts to vector format so can be used in apply / mapping below to use function on all the species names in this vector
length(species_list)





# # Extract unique fish species taxonomic names - includes taxonomic names to family, genus, and species level
# species_list <- na.omit(unique(bio_data_clean$TAXONOMIC))
# length(species_list) ## returns 1,166 unique taxonomic names


# # Extract unique fish species taxonomic names - ONLY fishes identified to species level - returns a list
# species_df <- bio_data_clean[grep("\\b\\w+\\s\\w+\\b", bio_data_clean$TAXONOMIC), ]
# species_list_2 <- unique(species_df$TAXONOMIC)
# length(species_list_2) ## returns 847 unique taxonomic names

```


## Applying the gCOB function to all the unique fish species identified in the dataset

```{r appy gCOB function to each unique fish species - calculate gCOB for all fish species}

# Apply the fish_calculate_gCOB function to each unique species and combine results into a list
result_list <- map(species_list, ~ fish_calculate_gCOB(taxonomic_column = "TAXONOMIC", species_name = .))


# # Convert the species names to lowercase for case-insensitive matching
# species_name <- tolower("Epinephelus morio")
# 
# # Find the index corresponding to the species name (case-insensitive)
# index <- which(grepl(species_name, tolower(names(result_list))))
# 
# if (length(index) == 0) {
#   # If no match is found, print an error message
#   print("Species not found in the result list.")
# } else {
#   # Access the result for the first matching species
#   species_result <- result_list[[index[1]]]
# }
# 
# 
# 
# 
# 
# # Access the result for a specific species by its taxonomic name
# # Convert the species names to lowercase for case-insensitive matching
# species_name <- tolower("Epinephelus morio")
# # Access the result for a specific species by its taxonomic name (case-insensitive)
# species_result <- result_list[[which(tolower(names(result_list)) == species_name)]]
# 
# # Get the list of species names from the result_list
# species_names <- names(result_list)

```




## Misspelled entries in the TAXONOMIC column - OR need to check for updated scientific names in FishBase
 - ALUTERUS HEUDELOTTI, 	ALUTERUS HEUDELOTII
 - APOGON ALUTUS,    ASTRAPOGON ALUTUS



```{r test for linear trends of gCOB for lionfish}

ggplot(cg, aes(longitude, latitude)) +
  geom_point(aes(colour = year))


ggplot(cg, aes(year, longitude)) +
  geom_point() +
  geom_smooth(method = lm,
              level = 0.95,
              col = "purple",
              linewidth = 2)


ggplot(cg, aes(year, latitude)) +
  geom_point() +
  geom_smooth(method = lm,
              level = 0.95,
              col = "purple",
              linewidth = 2)


lat_model <- lm(latitude ~ year, data = cg)
summary(lat_model)


long_model <- lm(longitude ~ year, data = cg)
summary(long_model)


```


## side note - the rfishbase package looks helpful for extracting most information from FishBase. Unfortunately, the information I need to extract is not found in a table, so this package doesn't work for me.


```{r web scraping FishBase for fish species distribution information}


# library(rvest)
# library(xml2)
# library(stringr)

# Function to scrape climate zone information from FishBase
get_climate_zone <- function(species_name) {
  # Construct the URL for the FishBase search page
  base_url <- "https://www.fishbase.se/summary/"
  search_url <- paste0(base_url, gsub(" ", "-", tolower(species_name)))
 
  # Fetch the HTML content of the search page
  search_page <- read_html(search_url)
 
  # Find the <h1> element containing the word "Environment" and get the following sibling <div>
  environment_section <- search_page %>%
    html_elements(xpath = "//h1[contains(translate(., 'ENVIRONMENT', 'environment'), 'environment')]/following-sibling::div[1]") %>%
    html_text(trim = TRUE) %>%
    tolower()
 
  # Check if environment information is found
  if (length(environment_section) == 0) {
    warning(paste("No environment information found for the species:", species_name))
    return(NA)
  }
 
  # Extract climate zone information from the Environment text
  climate_zones <- c("subtropical", "tropical", "temperate", "polar", "deep-water")
  climate_zone <- NA
 
  for (zone in climate_zones) {
    if (str_detect(environment_section, fixed(zone, ignore_case = TRUE))) {
      climate_zone <- zone
      break
    }
  }
 
  # Print environment text for diagnostics
  cat("Environment Text:", environment_section, "\n")
 
  # Return climate zone information
  return(climate_zone)
}

# Test the function for "Epinephelus morio"
species_name <- "Epinephelus morio"
climate_zone <- get_climate_zone(species_name)
print(climate_zone)


```


```{r fish scientific names that need to be updated}


## the taxonomic name for the Rock Sea Bass in the SEAMAP trawl data is currently "CENTROPRISTIS PHILADELPHICUS", but on FishBase, the scientific name given is "Centropristis philadelphica"

bio_data_clean <- bio_data_clean %>% 
  mutate(TAXONOMIC = case_when((TAXONOMIC == "CENTROPRISTIS PHILADELPHICUS") ~ "Centropristis philadelphica", .default = TAXONOMIC))



## the taxonomic name for the Bandtooth conger in the SEAMAP trawl data is currently "ARIOSOMA BELEARICUM", but on FishBase, the scientific name given is "Ariosoma balearicum"



## the taxonomic name for the bearded brotula in the SEAMAP trawl data is currently "BROTULA BARBATUM", but on FishBase, the scientific name given is "Brotula barbata"





```



Species Names in SEAMAP Trawl Data that do NOT align with FishBase Spellings:

- ARIOSOMA BELEARICUM
- BENTHODESMUS ATLANTICUS - no longer accepted, is now Benthodesmus simonyi
- BROTULA BARBATUM -> Brotula barbata
- CAELORINCHUS CARIBBAEUS -> Coelorinchus caribbaeus (and associated congeners)
- CENTROPRISTIS PHILADELPHICUS -> Centropristis philadelphica


### Need to find a way to refine my list of fish species to do all my analyses and plotting for! >1000 unique fish 'species' is too many.
 - consider a different column / variable to use
 - only keep unique TAXONOMIC entries that have 2 words (Genus species) versus just 1 word (family or genus level only)



```{r loop through FishBase function to get information for every fish species}

# Iterate through each unique fish species - use the species_list from above which only includes fishes identified to species level (847 species)

# Initialize an empty data frame to store results
species_climate_df <- data.frame(species_name = character(), climate_zone = character(), stringsAsFactors = FALSE)

for (species in species_list) {
  # Get the climate zone for the species
  climate_zone <- get_climate_zone(species)
  
  # Append the species name and climate zone to the data frame
  species_climate_df <- rbind(species_climate_df, data.frame(species_name = species, climate_zone = climate_zone))
}

# # Print the resulting data frame
# print(species_climate_df)
# 
# # View the resulting data frame
# view(species_climate_df)

# Create csv file with species climate information
write_csv(species_climate_df, file = "data/clean_data/species_climate_data.csv")


# ## MAY NOT NEED TO DO THIS PART - THE ISSUE WAS WITH A SPECIES NAME THAT HAD A SLASH (/) IN IT 
# 
# # separate species_list into smaller lists to loop through so FishBase and for loop don't time out every time...
# species_list_1_100 <- species_list[1:100]
# species_list_101_200 <- species_list[101:200]
# species_list_201_300 <- species_list[201:300]
# species_list_301_400 <- species_list[301:400]
# species_list_401_500 <- species_list[401:500]
# species_list_501_600 <- species_list[501:600]
# species_list_601_700 <- species_list[601:700]
# species_list_701_800 <- species_list[701:800]
# species_list_801_847 <- species_list[801:847]
# 
# species_chunks <- list(
#   species_list_1_100 <- species_list[1:100],
#   species_list_101_200 <- species_list[101:200],
#   species_list_201_300 <- species_list[201:300],
#   species_list_301_400 <- species_list[301:400],
#   species_list_401_500 <- species_list[401:500],
#   species_list_501_600 <- species_list[501:600],
#   species_list_601_700 <- species_list[601:700],
#   species_list_701_800 <- species_list[701:800],
#   species_list_801_847 <- species_list[801:847]
# )
# 
# 
# # Initialize an empty data frame to store results
# species_climate_df_test <- data.frame(species_name = character(), climate_zone = character(), stringsAsFactors = FALSE)
# 
# for(chunk in species_chunks){
#   species_small <- chunk
#   for (species in species_small) {
#     # Get the climate zone for the species
#     climate_zone <- get_climate_zone(species)
#     
#     # Append the species name and climate zone to the data frame
#     species_climate_df_test <- rbind(species_climate_df_test, data.frame(species_name = species, climate_zone = climate_zone))
#   }
# }



```



