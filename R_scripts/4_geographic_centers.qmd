---
title: "4_geographic_centers"
author: "Shayna A. Sura"
format: pdf
---



```{r setup}

library(tidyverse) # includes and loads the packages listed below
# library(readr)
# library(tidyr)
# library(dplyr)
# library(ggplot2)
# library(lubridate)

library(here) # helps with paths for files

library(purrr)

library(rvest) #for web scraping
library(xml2)
library(stringr)

```



```{r reading in cleaned bio data}
#| echo: false
#| message: false

bio_data_clean <- read_csv(file = "data/clean_data/bio_data.csv")

# head(bio_data_clean)

```


```{r lionfish data subset}

lionfish_data <- bio_data_clean %>% 
  filter(GENUS_BGS == "PTEROIS")

## need to add zeroes to the lionfish data for the years before it was detected and any years it wasn't detected when surveys were done.
survey_years <- data.frame("YR" = sort(unique(bio_data_clean$YR)))
# survey_years

## need to add zeroes to the lionfish data for the SURVEY STATIONS within each year where lionfish were NOT detected...


## Do a right join to the survey_years work for adding zeroes to the lionfish_data to get the animation to show the blank years.
# lionfish_data <- lionfish_data %>% 
#   right_join(survey_years, join_by(YR))

```



```{r calculate gCOB for lionfish}

# survey_years

cg <- data.frame(year = unique(lionfish_data$YR),
                 latitude = NA,
                 longitude = NA)

unique_years <- unique(lionfish_data$YR)

for(i in 1:length(unique(lionfish_data$YR))) {
  filtered_data <- filter(lionfish_data, YR == unique_years[i])
  
  # Check if the filtered dataset is not empty
  if(nrow(filtered_data) > 0) {
    cg$latitude[i] <- sum(filtered_data$DECSLAT * filtered_data$SELECT_BGS) / sum(filtered_data$SELECT_BGS)
    cg$longitude[i] <- sum(filtered_data$DECSLON * filtered_data$SELECT_BGS) / sum(filtered_data$SELECT_BGS)
  } else {
    # If the filtered dataset is empty, assign NA to latitude and longitude
    cg$latitude[i] <- NA
    cg$longitude[i] <- NA
  }
}


```



```{r function to calculate gCOB for species}

fish_calculate_gCOB <- function(data = bio_data_clean,
                                taxonomic_column = "TAXONOMIC",
                                common_name_column = "common_name",
                                species_name)
  {
  species_data <- data %>% 
    filter(if_any(all_of(taxonomic_column), ~ toupper(.) == toupper(species_name)))
  
  # Check if there is data for the specified species
  if (nrow(species_data) == 0) {
    stop(paste("No data found for species:", species_name))
  }
  
  # determine the specific years where fish appeared in trawl(s)
  unique_years <- unique(species_data$YR)


  # for loop to calculate gCOB latitude and longitude for each year when fish appeared in trawl(s)
  for(i in 1:length(unique(species_data$YR))) {
    filtered_data <- filter(species_data, YR == unique_years[i])

    # Check if the filtered dataset is not empty
    if(nrow(filtered_data) > 0) {
      cg$latitude[i] <- sum(filtered_data$DECSLAT * filtered_data$SELECT_BGS) / sum(filtered_data$SELECT_BGS)
      cg$longitude[i] <- sum(filtered_data$DECSLON * filtered_data$SELECT_BGS) / sum(filtered_data$SELECT_BGS)
    } else {
      # If the filtered dataset is empty, assign NA to latitude and longitude
      cg$latitude[i] <- NA
      cg$longitude[i] <- NA
    }}

  # Order the cg dataframe by time / years
  cg <- cg %>% arrange(year)

  # Assign the cg dataframe with gCOB values to a variable with a name that includes the species name
  assign(paste(species_name, "_gCOB", sep = ""), cg, envir = .GlobalEnv)

  # Return the cg dataframe
  return(cg)
  
}
  
  
  
  # 
  # cg <- list()  # Initialize an empty list to store data frames
  # 
  # for (i in 1:length(unique_years)) {
  #   filtered_data <- filter(species_data, YR == unique_years[i])
  #   if (nrow(filtered_data) > 0) {
  #     cg[[i]] <- data.frame(year = unique_years[i],
  #                            latitude = sum(filtered_data$DECSLAT * filtered_data$SELECT_BGS) / sum(filtered_data$SELECT_BGS),
  #                            longitude = sum(filtered_data$DECSLON * filtered_data$SELECT_BGS) / sum(filtered_data$SELECT_BGS))
  #   } else {
  #     cg[[i]] <- data.frame(year = unique_years[i],
  #                            latitude = NA,
  #                            longitude = NA)
  #   }
  # }
  # 
  # cg <- lapply(cg, function(x) x[order(x$year), ])  # Order each data frame by year
  # 
  # names(cg) <- species_name  # Assign the species name as the name of the list element
  # 
  # return(cg)
  
  
  
  
  
  
  
  # # initialize an empty list to store data frames
  # cg_list <- list()
  # 
  # # # initialize empty dataframe to hold gCOB values
  # # cg <- data.frame(year = unique(species_data$YR),
  # #                latitude = NA,
  # #                longitude = NA)
  # 
  # 
  # for (i in 1:length(unique_years)) {
  #   filtered_data <- filter(species_data, YR == unique_years[i])
  #   if (nrow(filtered_data) > 0) {
  #     cg <- data.frame(year = unique_years[i],
  #                      latitude = sum(filtered_data$DECSLAT * filtered_data$SELECT_BGS) / sum(filtered_data$SELECT_BGS),
  #                      longitude = sum(filtered_data$DECSLON * filtered_data$SELECT_BGS) / sum(filtered_data$SELECT_BGS))
  #   } else {
  #     cg <- data.frame(year = unique_years[i],
  #                      latitude = NA,
  #                      longitude = NA)
  #   }
  #   
  #   # store the result with the species name as its name in the list
  #   cg_list[[species_name]] <- cg  # Add the data frame to the list
  # }
  # 
  # cg_list <- lapply(cg_list, function(x) x[order(x$year), ])  # Order each data frame by year
  # 
  # return(cg_list)
  
  
  
  
#   
# }


```




```{r testing the gCOB function with individual species}

## testing the function

fish_calculate_gCOB(bio_data_clean,
                    taxonomic = "GENUS_BGS",
                    species_name = "Pterois")


fish_calculate_gCOB(bio_data_clean,
                    taxonomic = "TAXONOMIC",
                    species_name = "Epinephelus morio")

```

## Import list of refined fish species taxonomic names from R script "3_species_info" to use here

```{r import list of refined fish species taxonomic names}

## TO DO ##


```




## Applying the gCOB function to all the unique fish species identified in the dataset

```{r appy gCOB function to each unique fish species - calculate gCOB for all fish species}

# Apply the fish_calculate_gCOB function to each unique species and combine results into a list
result_list <- map(species_list, ~ fish_calculate_gCOB(taxonomic_column = "TAXONOMIC", species_name = .))


# # Convert the species names to lowercase for case-insensitive matching
# species_name <- tolower("Epinephelus morio")
# 
# # Find the index corresponding to the species name (case-insensitive)
# index <- which(grepl(species_name, tolower(names(result_list))))
# 
# if (length(index) == 0) {
#   # If no match is found, print an error message
#   print("Species not found in the result list.")
# } else {
#   # Access the result for the first matching species
#   species_result <- result_list[[index[1]]]
# }
# 
# 
# 
# 
# 
# # Access the result for a specific species by its taxonomic name
# # Convert the species names to lowercase for case-insensitive matching
# species_name <- tolower("Epinephelus morio")
# # Access the result for a specific species by its taxonomic name (case-insensitive)
# species_result <- result_list[[which(tolower(names(result_list)) == species_name)]]
# 
# # Get the list of species names from the result_list
# species_names <- names(result_list)

```






```{r test for linear trends of gCOB for lionfish}

ggplot(cg, aes(longitude, latitude)) +
  geom_point(aes(colour = year))


ggplot(cg, aes(year, longitude)) +
  geom_point() +
  geom_smooth(method = lm,
              level = 0.95,
              col = "purple",
              linewidth = 2)


ggplot(cg, aes(year, latitude)) +
  geom_point() +
  geom_smooth(method = lm,
              level = 0.95,
              col = "purple",
              linewidth = 2)


lat_model <- lm(latitude ~ year, data = cg)
summary(lat_model)


long_model <- lm(longitude ~ year, data = cg)
summary(long_model)


```




