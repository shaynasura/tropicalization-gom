---
title: "4_geographic_centers"
author: "Shayna A. Sura"
format: pdf
---

### Setup - load libraries.

```{r setup}

library(tidyverse) # includes and loads the packages listed below
# library(readr)
# library(tidyr)
# library(dplyr)
# library(ggplot2)
# library(lubridate)

library(here) # helps with paths for files

library(purrr)

library(rvest) #for web scraping
library(xml2)
library(stringr)

library(broom) # for creating tibbles of model output information

# library(devtools) # for loading all functions from functions folder - doesn't work unless my functions are associated with an R package, which they are not.

```



## source custom functions to simplify conducting these analyses

```{r}

# getwd()

source("R_scripts/functions/fish_calculate_gCOB.R")
source("R_scripts/functions/test_gCOBs_over_time.R")
source("R_scripts/functions/combine_and_modify_models.R")
source("R_scripts/functions/filter_gCOB_dataframes.R")

```





### Read in cleaned data to analyze

```{r reading in cleaned bio data}
#| echo: false
#| message: false

bio_data_clean_all <- read_csv(file = "data/clean_data/bio_data_clean.csv")

bio_data_clean_yr2010_2022_m678 <- read_csv(file = "data/clean_data/bio_data_clean_yr2010_2022_m678.csv")

# head(bio_data_clean)

```





#### subsetting data for lionfish as a test for analyses

```{r lionfish data subset}

lionfish_data <- bio_data_clean_all %>% 
  filter(GENUS_BGS == "PTEROIS")

## need to add zeroes to the lionfish data for the years before it was detected and any years it wasn't detected when surveys were done.
survey_years <- data.frame("YR" = sort(unique(bio_data_clean_all$YR)))
# survey_years

## need to add zeroes to the lionfish data for the SURVEY STATIONS within each year where lionfish were NOT detected...


## Do a right join to the survey_years work for adding zeroes to the lionfish_data to get the animation to show the blank years.
# lionfish_data <- lionfish_data %>% 
#   right_join(survey_years, join_by(YR))

```


#### calculating gCOB for lionfish as a test (before defining function to do this)

```{r calculate gCOB for lionfish}

# create an empty list to store cg dataframe
species_gCOBs <- list()

# create an empty data frame to store calculate gCOB values in
cg <- data.frame(year = unique(lionfish_data$YR),
                 latitude = NA,
                 longitude = NA)

# determine the unique years for which lionfish data exist
unique_years <- unique(lionfish_data$YR)


# for loop to calculate gCOB values for each year in which lionfish data exist
for(i in 1:length(unique(lionfish_data$YR))) {
  filtered_data <- filter(lionfish_data, YR == unique_years[i])
  
  # Check if the filtered dataset is not empty
  if(nrow(filtered_data) > 0) {
    cg$latitude[i] <- sum(filtered_data$DECSLAT * filtered_data$SELECT_BGS) / sum(filtered_data$SELECT_BGS)
    cg$longitude[i] <- sum(filtered_data$DECSLON * filtered_data$SELECT_BGS) / sum(filtered_data$SELECT_BGS)
  } else {
    # If the filtered dataset is empty, assign NA to latitude and longitude
    cg$latitude[i] <- NA
    cg$longitude[i] <- NA
  }
}

species_gCOBs[["lionfish_gCOB_test"]] <- cg

species_gCOBs[["lionfish_gCOB_test"]]

```


### Function to calculate gCOBs for all species in a given dataset

```{r function to calculate gCOB for species}


# function to calculate gCOBs for fish species
fish_calculate_gCOB <- function(data = bio_data_clean_all,
                                output_name = "gCOBs_all_data",
                                taxonomic_column = "new_TAXON",
                                # taxonomic_column = "TAXONOMIC",
                                common_name_column = "common_name",
                                species_name)
  {
  species_data <- data %>% 
    filter(if_any(all_of(taxonomic_column), ~ toupper(.) == toupper(species_name)))
  
  # Check if there is data for the specified species
  if (nrow(species_data) == 0) {
    stop(paste("No data found for species:", species_name))
  }
  
  # determine the specific years where fish appeared in trawl(s)
  unique_years <- unique(species_data$YR)

  # initiate empty data frame to store data in
  cg <- data.frame(year = unique_years,
                   latitude = NA,
                   longitude = NA)

  # for loop to calculate gCOB latitude and longitude for each year when fish appeared in trawl(s)
  for(i in 1:length(unique_years)) {
    filtered_data <- filter(species_data, YR == unique_years[i])

    # Check if the filtered dataset is not empty
    if(nrow(filtered_data) > 0) {
      cg$latitude[i] <- sum(filtered_data$DECSLAT * filtered_data$SELECT_BGS) / sum(filtered_data$SELECT_BGS)
      cg$longitude[i] <- sum(filtered_data$DECSLON * filtered_data$SELECT_BGS) / sum(filtered_data$SELECT_BGS)
    } else {
      # If the filtered dataset is empty, assign NA to latitude and longitude
      cg$latitude[i] <- NA
      cg$longitude[i] <- NA
    }}

  # Order the cg dataframe by time / years
  cg <- cg %>% arrange(year)
  
  # Get the existing list from the global environment
  # global_species_gCOBs <- get("species_gCOBs", envir = .GlobalEnv)
    global_species_gCOBs <- get(output_name, envir = .GlobalEnv)
  
  # Assign the cg dataframe with gCOB values the name of the fish species and add to the global_species_gCOBs list
  global_species_gCOBs[[paste(species_name, "_gCOB", sep = "")]] <- cg
  
  # Assign the modified list back to the global environment
  # assign("species_gCOBs", global_species_gCOBs, envir = .GlobalEnv)
    assign(output_name, global_species_gCOBs, envir = .GlobalEnv) 

  # # Assign the cg dataframe with gCOB values to a variable with a name that includes the species name
  # assign(paste(species_name, "_gCOB", sep = ""), cg, envir = .GlobalEnv)

  # Return the cg dataframe
  return(cg)
  
}


## Example use: 
# must create an empty list to store cg dataframe
# gCOBs_all_data <- list()
# gCOBs_yr2010_2022_m678 <- list()


```


#### Testing the gCOB function for individual species

```{r testing the gCOB function with individual species}

# Lionfish - Pterois genus
## must create an empty list to store cg dataframe
gCOBs_Pterois <- list()

## testing the function
fish_calculate_gCOB(bio_data_clean_all,
                    taxonomic = "GENUS_BGS",
                    species_name = "Pterois",
                    output_name = "gCOBs_Pterois")



# Epinephelus morio
## create empty list to store dataframe of gCOBs
gCOBs_Epinephelus_morio <- list()
## use function
fish_calculate_gCOB(bio_data_clean_yr2010_2022_m678,
                    output_name = "gCOBs_Epinephelus_morio",
                    taxonomic = "new_TAXON",
                    species_name = "Epinephelus morio")


# PSEUDOBATOS LENTIGINOSUS
gCOBs_Pseudobatos_lentiginosus <- list()

fish_calculate_gCOB(bio_data_clean_yr2010_2022_m678,
                    output_name = "gCOBs_Pseudobatos_lentiginosus",
                    taxonomic = "new_TAXON",
                    species_name = "Pseudobatos lentiginosus")

```




## Get list of fish species taxonomic names from dataset

```{r get list of fish species taxonomic names}

## species list for 2010 - 2022 summer months (6,7,8) data only
species_df_yr2010_2022_m678 <- bio_data_clean_yr2010_2022_m678 %>% 
  select(new_TAXON, RANK) %>% 
  filter(RANK == "SPECIES") %>% 
  distinct(new_TAXON, .keep_all = TRUE) %>% 
  arrange(new_TAXON)

dim(species_df_yr2010_2022_m678) # 513 unique taxonomic names
species_vec_yr2010_2022_m678 <- species_df_yr2010_2022_m678$new_TAXON
length(species_vec_yr2010_2022_m678) # 513 unique taxonomic names


```




## Applying the gCOB function to all the unique fish species identified in the dataset
### ENTIRE DATASET

```{r appy gCOB function to each unique fish species - calculate gCOB for all fish species}

# Applying the gCOB calculate function to each unique species for the entire dataset
# create an empty list to store cg dataframe
gCOBs_all_data <- list()


# Apply the fish_calculate_gCOB function to each unique species and combine results into a list
result_list <- map(species_list, ~ fish_calculate_gCOB(taxonomic_column = "new_TAXON",
                                                       species_name = .,
                                                       output_name = "gCOBs_all_data"))


```


### 'all GoM summer' - subset of data from 2010-2022 for summer months (June, July, August)
```{r}

# Applying the gCOB calculate function to each unique species for the dataset only containing 2010 - 2022 data

# create an empty list to store cg dataframe
gCOBs_yr2010_2022_m678 <- list()


# Apply the fish_calculate_gCOB function to each unique species and combine results into a list
result_list_yr2010_2022_m678 <- map(species_vec_yr2010_2022_m678, ~fish_calculate_gCOB(data = bio_data_clean_yr2010_2022_m678,
                                                                                        output_name = "gCOBs_yr2010_2022_m678",
                                                                                        taxonomic_column = "new_TAXON",
                                                                                        common_name_column = "new_TAXON",
                                                                                        species_name = .))

```



## Pulling results of calculated gCOBs for individual species from species_gCOBs list - NEED TO UPDATE CODE TO PULL RESULTS FROM OTHER gCOBs LISTS OF RESULTS

```{r access gCOB values for individual species}

## pull results for individual species
# Convert the species names to lowercase for case-insensitive matching
species_name <- tolower("Epinephelus morio")
 # 	ALUTERUS SCHOEPFII

species_name <- tolower("ALUTERUS SCHOEPFII")

# Find the index corresponding to the species name (case-insensitive)
index <- which(grepl(species_name, tolower(names(species_gCOBs))))

if (length(index) == 0) {
  # If no match is found, print an error message
  print("Species not found in the result list.")
} else {
  # Access the result for the first matching species
  species_gCOBs[[index[1]]]
  # species_result <- species_gCOBs[[index[1]]]
}

# species_result



# Access the result for a specific species by its taxonomic name
# Convert the species names to lowercase for case-insensitive matching
species_name <- tolower("Epinephelus morio")

# Access the result for a specific species by its taxonomic name (case-insensitive)
species_result <- species_gCOBs[[which(tolower(names(species_gCOBs)) == species_name)]]

# Get the list of species names from the species_gCOBs list
# names(species_gCOBs)
species_names <- names(species_gCOBs)

```



## testing linear trends models for gCOB for lionfish

```{r test for linear trends of gCOB for lionfish}

ggplot(cg, aes(longitude, latitude)) +
  geom_point(aes(colour = year),
                 size = 5
             )


ggplot(cg, aes(year, longitude)) +
  geom_point() +
  geom_smooth(method = lm,
              level = 0.95,
              col = "purple",
              linewidth = 2)


ggplot(cg, aes(year, latitude)) +
  geom_point() +
  geom_smooth(method = lm,
              level = 0.95,
              col = "purple",
              linewidth = 2)


lat_model <- lm(latitude ~ year, data = cg)
summary(lat_model)


long_model <- lm(longitude ~ year, data = cg)
summary(long_model)


```



## Function to run linear models of gCOBs for latitude and longitude over time

```{r function run linear models in gCOB latitude and longitudes over time}

# function to run linear models on gCOB latitude and longitude values over time to test for shifts
test_gCOBs_over_time <- function(species_name,
                                 input_gCOBs,
                                 output_df_name,
                                 latitude_models_output_name,
                                 longitude_models_output_name)
{
  species <- tolower(species_name)
  
  # Find the index corresponding to the species name (case-insensitive)
    index <- which(grepl(species, tolower(names(input_gCOBs))))
  
  if (length(index) == 0) {
    # If no match is found, print an error message
    print("Species not found in the input_gCOBs list.")
  } else {
    # Access the result for the first matching species
    species_result <- input_gCOBs[[index[1]]]
  }
  
  
  internal_gCOB_trends <- data.frame(species = NA,
                                     latitude_year_coef = NA,
                                     latitude_year_SE = NA,
                                     latitude_pvalue = NA,
                                     latitude_rsquared = NA,
                                     latitude_rsquared_adj = NA,
                                     longitude_year_coef = NA,
                                     longitude_year_SE = NA,
                                     longitude_pvalue = NA,
                                     longitude_rsquared = NA,
                                     longitude_rsquared_adj = NA)
  
  # put species name in first column
  internal_gCOB_trends$species <- toupper(species_name)
  
  
  # Check if there are any non-NA values in the data frame
  if (all(is.na(species_result$latitude)) || all(is.na(species_result$longitude))) {
    # If there are only NAs in the data frame, assign NA to all values
    internal_gCOB_trends$latitude_year_coef <- NA
    internal_gCOB_trends$latitude_year_SE <- NA
    internal_gCOB_trends$latitude_pvalue <- NA
    internal_gCOB_trends$latitude_rsquared <- NA
    internal_gCOB_trends$latitude_rsquared_adj <- NA
    internal_gCOB_trends$longitude_year_coef <-NA
    internal_gCOB_trends$longitude_year_SE <- NA
    internal_gCOB_trends$longitude_pvalue <- NA
    internal_gCOB_trends$longitude_rsquared <- NA
    internal_gCOB_trends$longitude_rsquared_adj <- NA
  } else {
  
    # fit linear models testing for trends in latitude and longitude of gCOBs over time
    lat_model <- lm(latitude ~ year, data = species_result)
    long_model <- lm(longitude ~ year, data = species_result)
    
    # Check if the models produced valid results
    if(is.na(coef(lat_model)[["year"]]) == TRUE) {
      # If the coefficient for the year predictor is NA (meaning only one data point), assign NA to all values
      internal_gCOB_trends$latitude_year_coef <- NA
      internal_gCOB_trends$latitude_year_SE <- NA
      internal_gCOB_trends$latitude_pvalue <- NA
      internal_gCOB_trends$latitude_rsquared <- NA
      internal_gCOB_trends$latitude_rsquared_adj <- NA
    } else {
      # Pull out important result values from the linear model summary
      internal_gCOB_trends$latitude_year_coef <- lat_model$coefficients[["year"]]
      internal_gCOB_trends$latitude_year_SE <- coef(summary(lat_model))[["year","Std. Error"]]
      internal_gCOB_trends$latitude_pvalue <- coef(summary(lat_model))["year", "Pr(>|t|)"]
      internal_gCOB_trends$latitude_rsquared <- summary(lat_model)$r.squared
      internal_gCOB_trends$latitude_rsquared_adj <- summary(lat_model)$adj.r.squared
    }
    
    if(is.na(coef(long_model)[["year"]]) == TRUE) {
      # If the coefficient for the year predictor is NA (meaning only one data point), assign NA to all values
      internal_gCOB_trends$longitude_year_coef <-NA
      internal_gCOB_trends$longitude_year_SE <- NA
      internal_gCOB_trends$longitude_pvalue <- NA
      internal_gCOB_trends$longitude_rsquared <- NA
      internal_gCOB_trends$longitude_rsquared_adj <- NA
    } else {
      # Pull out important result values from the linear model summary
      internal_gCOB_trends$longitude_year_coef <- long_model$coefficients[["year"]]
      internal_gCOB_trends$longitude_year_SE <- coef(summary(long_model))[["year","Std. Error"]]
      internal_gCOB_trends$longitude_pvalue <- coef(summary(long_model))["year", "Pr(>|t|)"]
      internal_gCOB_trends$longitude_rsquared <- summary(long_model)$r.squared
      internal_gCOB_trends$longitude_rsquared_adj <- summary(long_model)$adj.r.squared
    }
  }
  
  # Get the existing dataframe from the global environment
  # global_gCOB_trends <- get("gCOB_trends", envir = .GlobalEnv) 
  global_gCOB_trends <- get(output_df_name, envir = .GlobalEnv) 
  
  # Assign the cg dataframe with gCOB values the name of the fish species and add to the global_gCOB_trends dataframe
  global_gCOB_trends <- rbind(global_gCOB_trends, internal_gCOB_trends)
  
  # Assign the modified dataframe back to the global environment
  assign(output_df_name, global_gCOB_trends, envir = .GlobalEnv)
  
  
  ### get tidy output tables of model results
  tidy_latitude <- lat_model %>% tidy(conf.int = TRUE)
  tidy_longitude <- long_model %>% tidy(conf.int = TRUE)
  
  # Get the existing lists from the global environment
  global_species_latitude_models <- get(latitude_models_output_name, envir = .GlobalEnv)
  global_species_longitude_models <- get(longitude_models_output_name, envir = .GlobalEnv)
  
  # Assign the tidy tibbles with linear model outputs the name of the fish species and add to the global_species_models lists
  global_species_latitude_models[[paste(species_name, "_latitude_lm_model", sep = "")]] <- tidy_latitude
  global_species_longitude_models[[paste(species_name, "_longitude_lm_model", sep = "")]] <- tidy_longitude
  
  # Assign the modified lists back to the global environment
  assign(latitude_models_output_name, global_species_latitude_models, envir = .GlobalEnv) 
  assign(longitude_models_output_name, global_species_longitude_models, envir = .GlobalEnv)
  
  
  return(internal_gCOB_trends)
  
}

```





## Function to filter dataframes of calculated gCOBs as necessary - e.g., if only want to include species who have calculated gCOBs for a minimum of 5 years

```{r function to filter gCOB dataframes for species with a minimum number of years of data}

# filter the list of gCOB dataframes to only keep those that have calculated gCOB values for a minimum number of years (e.g. 5)
filter_gCOB_dataframes <- function(df_list, min_years = 5) {
  # Initialize an empty list to store filtered data frames
  filtered_list <- list()
  
  # Loop through each data frame in the list
  for (i in seq_along(df_list)) {
    df <- df_list[[i]]  # Extract the current data frame
    # Calculate the number of unique years for each species
    unique_years <- length(unique(df$year))
    
    # Check if the number of unique years is at least min_years
    if (unique_years >= min_years) {
      # If yes, add the data frame to the filtered list with its original name
      filtered_list[[names(df_list)[i]]] <- df
    }
  }
  
  # Return the filtered list of data frames
  return(filtered_list)
}



# # Example usage
# # Filter the list of data frames
# gCOBs_filtered_yr2010_2022_m678 <- filter_gCOB_dataframes(gCOBs_yr2010_2022_m678, min_years = 5)
# 
# 
# # get updated list of fish species names
# species_vec_gCOBs_yr2010_2022_m678 <- gsub("_gCOB", "", names(gCOBs_filtered_yr2010_2022_m678))

```




## Applying the gCOB trends function to all the unique fish species identified in the dataset
### 'all GoM summer' - subset of data from 2010-2022 for summer months (June, July, August)
### Only going to test linear models for fish species that were caught in 5+ years of trawls

```{r apply gCOB trends function to gCOBS_yr2010_2022_m678}

# Filter the list of data frames
gCOBs_yr2010_2022_m678 <- filter_gCOB_dataframes(gCOBs_yr2010_2022_m678, min_years = 5)


# get updated list of fish species names
species_vec_yr2010_2022_m678 <- gsub("_gCOB", "", names(gCOBs_yr2010_2022_m678))


# initiate empty data frame to store data in
gCOB_trends_yr2010_2022_m678 <- data.frame(species = NA,
                                           latitude_year_coef = NA,
                                           latitude_year_SE = NA,
                                           latitude_pvalue = NA,
                                           latitude_rsquared = NA,
                                           latitude_rsquared_adj = NA,
                                           longitude_year_coef = NA,
                                           longitude_year_SE = NA,
                                           longitude_pvalue = NA,
                                           longitude_rsquared = NA,
                                           longitude_rsquared_adj = NA)

# initiate empty lists to store latitude and longitude model outputs
lat_models_yr2010_2022_m678 <- list()
long_models_yr2010_2022_m678 <- list()

# apply function
trends_results_yr2010_2022_m678 <- map(species_vec_yr2010_2022_m678,
                                       ~ test_gCOBs_over_time(species_name = .,
                                                              input_gCOBs = gCOBs_yr2010_2022_m678,
                                                              output_df_name = "gCOB_trends_yr2010_2022_m678",
                                                              latitude_models_output_name = "lat_models_yr2010_2022_m678",
                                                              longitude_models_output_name = "long_models_yr2010_2022_m678"))

# remove row of NAs at beginning of dataframe
gCOB_trends_yr2010_2022_m678 <- gCOB_trends_yr2010_2022_m678 %>% 
  slice(-1)


# export results as csv file
write_csv(gCOB_trends_yr2010_2022_m678, file = "output/gCOB_trends_results_raw_yr2010_2022_m678.csv")

```




## Applying the gCOB trends function to all the unique fish species identified in the dataset
###  ENTIRE DATASET

```{r appy test_gCOBs_over_time function to each unique fish species - test for trends in gCOBs for all species}

# initiate empty data frame to store data in
gCOB_trends_all_data <- data.frame(species = NA,
                          latitude_year_coef = NA,
                          latitude_year_SE = NA,
                          latitude_pvalue = NA,
                          latitude_rsquared = NA,
                          latitude_rsquared_adj = NA,
                          longitude_year_coef = NA,
                          longitude_year_SE = NA,
                          longitude_pvalue = NA,
                          longitude_rsquared = NA,
                          longitude_rsquared_adj = NA)

# initiate empty lists to store latitude and longitude model outputs in
lat_models_all_data <- list()
long_models_all_data <- list()

# Apply the test_gCOBs_over_time function to each unique species and combine results into a dataframe
trends_results_all_data <- map(species_list, ~ test_gCOBs_over_time(species_name = .,
                                                                      input_gCOBs = gCOBs_all_data,
                                                                      output_df_name = gCOB_trends_all_data ,
                                                                      latitude_models_output_name = "lat_models_all_data",
                                                                      longitude_models_output_name = "long_models_all_data"))

# Save results to a csv file
# write_csv(gCOB_trends, file = "output/all_species_gCOB_data_v1.csv")
write_csv(gCOB_trends_all_data, file = "output/gCOB_data_all_species.csv")

```


# OLD
## Applying the gCOB trends function to all the unique fish species identified in the dataset
### 'all GoM summer' - subset of data from 2010-2022 for summer months (June, July, August)

```{r OLD apply gCOB trends function to yr2010_2022_m678_gCOBs}
# 
# # initiate empty data frame to store data in
# gCOB_trends_yr2010_2022_m678 <- data.frame(species = NA,
#                                            latitude_year_coef = NA,
#                                            latitude_year_SE = NA,
#                                            latitude_pvalue = NA,
#                                            latitude_rsquared = NA,
#                                            latitude_rsquared_adj = NA,
#                                            longitude_year_coef = NA,
#                                            longitude_year_SE = NA,
#                                            longitude_pvalue = NA,
#                                            longitude_rsquared = NA,
#                                            longitude_rsquared_adj = NA)
# 
# # initiate empty lists to store latitude and longitude model outputs
# lat_models_yr2010_2022_m678 <- list()
# long_models_yr2010_2022_m678 <- list()
# 
# # apply function
# trends_results_yr2010_2022_m678 <- map(species_vec_yr2010_2022_m678,
#                                        ~ test_gCOBs_over_time(species_name = .,
#                                                               input_gCOBs = gCOBs_yr2010_2022_m678,
#                                                               output_df_name = "gCOB_trends_yr2010_2022_m678",
#                                                               latitude_models_output_name = "lat_models_yr2010_2022_m678",
#                                                               longitude_models_output_name = "long_models_yr2010_2022_m678"))
# 
# 
# 
# # export results as csv file
# write_csv(trends_results_yr2010_2022_m678, file = "output/trends_results_yr2010_2022_m678_raw.csv")


```



#### import climate zone information for fish species
```{r}

# import csv with cimate zone information for each fish species as web scraped from FishBase
species_climate_df <- read_csv(file = "output/species_climate_data.csv")

```



## NEXT - Summarize results from all the linear models...

- join the information about climate zone for the various fish species into the linear model results
- remove those fish species that don't have any or enough data for testing for linear trends over time
- group table by climate zone preferences
- explore results! ...how exactly?
  - start by examining frequency of latitude models with p-values < 0.05 indicating a significant trend over time
  - examine frequency of longitude models with p-values < 0.05 (indicating a significant trend over time)

## Double check these meanings with someone else!!! ##
- Latitude Meanings
  - positive coefficient estimate for latitude indicates northward shift.
  - negative coefficient estimate for latitude indicates southward shift.
- Longitude Meanings
  - positive coefficient estimate for longitude indicates eastward shift.
  - negative coefficient estimate for longitude indicates westward shift.


```{r}

# specify the gCOB trends dataframe to use here
gCOB_trends_data <- gCOB_trends_yr2010_2022_m678 

# join climate zone information to gCOB_trends
climate_gCOB_trends <- gCOB_trends_data %>%
  rename(species_name = species) %>%
  left_join(species_climate_df, join_by(species_name)) %>% 
  rename(species = species_name)


# summarize the number of fish species that show significant shifts in latitude or longitude based on significant p-values
significant_pvalues <- climate_gCOB_trends %>% 
  group_by(climate_zone) %>% 
  summarize(n = n(),
            num_sig_pvalues_lat = length(which(latitude_pvalue < 0.05)),
            num_sig_pvalues_long = length(which(longitude_pvalue < 0.05)),
            num_sig_lat_shift_north = length(which(latitude_pvalue < 0.05 & latitude_year_coef > 0)),
            num_sig_lat_shift_south = length(which(latitude_pvalue < 0.05 & latitude_year_coef < 0)),
            num_sig_long_shift_west = length(which(longitude_pvalue < 0.05 & longitude_year_coef < 0)),
            num_sig_long_shift_east = length(which(longitude_pvalue < 0.05 & longitude_year_coef > 0))
  )
         
significant_pvalues

# export to csv file
write_csv(significant_pvalues, file = "output/gCOB_trends_pvalue_summary_yr2010_2022_m678.csv")


```


## function to convert lists of model output to a single data frame

```{r}

# modify list of models into a single combined dataframe
combine_and_modify_models <- function(model_list, output_name, pattern) {
  # Create an empty list to store modified models
  model_combined <- list()
  
  # Loop through each model in the list
  for (i in seq_along(model_list)) {
    # Determine the pattern based on the input value
    if (pattern == "latitude") {
      species_name <- gsub("_latitude_lm_model", "", names(model_list)[i])
    } else if (pattern == "longitude") {
      species_name <- gsub("_longitude_lm_model", "", names(model_list)[i])
    } else {
      stop("Invalid pattern. Please specify 'latitude' or 'longitude'.")
    }
    
    # Add the species name as a new column to the model output
    model_with_species <- model_list[[i]] %>%
      mutate(species = species_name)
    
    # Store the modified model in the combined list
    model_combined[[i]] <- model_with_species
  }
  
  # Combine all the modified models into a single data frame
  combined_df <- bind_rows(model_combined)
  
  # Reorder columns so species is first
  combined_df <- combined_df %>%
    select(species, everything()) %>% 
    rename(species_name = species) %>% 
    left_join(species_climate_df, join_by(species_name)) %>% 
    rename(species = species_name)
    
  
  # Write the combined data frame to a file
  write.csv(combined_df, file = paste0(output_name, ".csv"), row.names = FALSE)
  
  # Return the combined data frame
  return(combined_df)
}




# Example usage:
# combined_df <- combine_and_modify_models(model_list = lat_models_yr2010_2022_m678,
#                                          output_name = "output_combined_models", pattern = "latitude")
# 
# lat_models_df_yr2010_2022_m678_filtered <- combine_and_modify_models(model_list = lat_models_filtered_yr2010_2022_m678,
#                                                                      output_name = "yr2010_2022_m678_filtered_lat_models_df", pattern = "latitude)



```


## using the combine_and_modify_models function
### 'all GoM summer' data subset

```{r get single dataframe of model results from lists of model output}

# latitudinal models
lat_models_df_yr2010_2022_m678 <- combine_and_modify_models(model_list = lat_models_yr2010_2022_m678,
                                                                     output_name = "lat_models_df_yr2010_2022_m678",
                                                                     pattern = "latitude")

# view(lat_models_df_yr2010_2022_m678)


# longitudinal models
long_models_df_yr2010_2022_m678 <- combine_and_modify_models(model_list = long_models_yr2010_2022_m678,
                                                                     output_name = "long_models_df_yr2010_2022_m678",
                                                                     pattern = "longitude")

# view(long_models_df_yr2010_2022_m678)

```




## doing the above, just not in a function

```{r}

# Create an empty list to store modified models
model_combined <- list()

# Loop through each model in the list
for (i in seq_along(yr2010_2022_m678_lat_models)) {
  # Extract the fish species name from the model name
  species_name <- gsub("_latitude_lm_model", "", names(yr2010_2022_m678_lat_models)[i])
  
  # Add the species name as a new column to the model output
  model_with_species <- yr2010_2022_m678_lat_models[[i]] %>%
    mutate(species = species_name)
  
  # Store the modified model in the combined list
  model_combined[[i]] <- model_with_species
}

# Combine all the modified models into a single data frame
combined_df <- bind_rows(model_combined)

# Reorder columns so species is first
combined_df <- combined_df %>%
  select(species, everything())

# Print the combined data frame
print(combined_df)


# dataframe without the Intercept terms
combined_df_no_intercepts <- combined_df %>% 
  filter(term != "(Intercept)")

print(combined_df_no_intercepts)



# clean the dataframe even more and include the climate zone information
# 1. join climate zone information to gCOB_trends
climate_gCOB_trends <- combined_df_no_intercepts %>% 
  rename(species_name = species) %>% 
  left_join(species_climate_df, join_by(species_name))

# 2. remove fish species who cannot have trends examined over time
climate_gCOB_trends_slim <- climate_gCOB_trends %>% 
  filter(estimate != "NA") %>% 
  filter(std.error != "NaN") %>% 
  rename(species = species_name) %>% 
  arrange(estimate) %>% 
  mutate(term_position = row_number())

```



## Summarize model output from single dataframes for latitude and longitude

```{r}


# summarize the number of fish species that show significant shifts in latitude or longitude based on 95CIs that do not overlap with zero
## latitude models
significant_95CIs_lat <- lat_models_df_yr2010_2022_m678 %>% 
  filter(term != "(Intercept)") %>%
  mutate(signif_95CI = ifelse(conf.low < 0 & conf.high > 0, "not significant", "significant")) %>% 
  mutate(signif_pvalue = ifelse(p.value < 0.05, "significant", "not significant")) %>% 
  group_by(climate_zone) %>% 
  summarize(n = n(),
            num_sig_95CIs_lat = sum(signif_95CI == "significant"),
            num_sig_pvalues_lat = sum(signif_pvalue == "significant"),
            num_sig_95CIs_lat_shift_north = sum(signif_95CI == "significant" & estimate > 0),
            num_sig_95CIs_lat_shift_south = sum(signif_95CI == "significant" & estimate < 0),
            north_shift_species = paste(species[signif_95CI == "significant" & estimate > 0], collapse = ", "),
            south_shift_species = paste(species[signif_95CI == "significant" & estimate < 0], collapse = ", ")
  )

# view(significant_95CIs_lat)



## longitude models
significant_95CIs_long <- long_models_df_yr2010_2022_m678 %>% 
  filter(term != "(Intercept)") %>%
  mutate(signif_95CI = ifelse(conf.low < 0 & conf.high > 0, "not significant", "significant")) %>% 
  mutate(signif_pvalue = ifelse(p.value < 0.05, "significant", "not significant")) %>% 
  group_by(climate_zone) %>% 
  summarize(n = n(),
            num_sig_95CIs_long = sum(signif_95CI == "significant"),
            num_sig_pvalues_long = sum(signif_pvalue == "significant"),
            num_sig_95CIs_long_shift_west = sum(signif_95CI == "significant" & estimate < 0),
            num_sig_95CIs_long_shift_east = sum(signif_95CI == "significant" & estimate > 0),
            west_shift_species = paste(species[signif_95CI == "significant" & estimate < 0], collapse = ", "),
            east_shift_species = paste(species[signif_95CI == "significant" & estimate > 0], collapse = ", ")
  )

# view(significant_95CIs_long)



## combine output from latitude and longitude summary dataframes
all_significant_95CIs <- significant_95CIs_lat %>% 
  left_join(significant_95CIs_long, join_by(climate_zone))

# view(all_significant_95CIs)



## export to csv file
write_csv(all_significant_95CIs, "output/gCOB_significant_trends_yr2010_2022_m678.csv")

```




 
## Make figures to examine for trends


### Make figures showing the regression coefficients...


```{r testing the plot_lat_long_gCOB_data function to make all 4 figures}

source("R_scripts/functions/plot_lat_long_gCOB_data.R")

plot_lat_long_gCOB_data(lat_data = lat_models_df_yr2010_2022_m678,
                                long_data = long_models_df_yr2010_2022_m678,
                                title_prefix = "TEST 2010-2022 June, July, & August")

# should produce four figures
Fig_1_yr2010_2022_m678
Fig_2_yr2010_2022_m678
Fig_3_yr2010_2022_m678
Fig_4_yr2010_2022_m678


```


### Raw original code to make the figures, before combined into the `plot_lat_long_gCOB_data` function above.


#### Plotting the LATITUDINAL data

```{r plotting linear regression slopes across fish species}

# dataframe without the Intercept terms
lat_data_to_plot <- lat_models_df_yr2010_2022_m678 %>% 
  filter(term != "(Intercept)") %>% 
  group_by(climate_zone) %>% 
  mutate(species = factor(species, levels = unique(species[order(estimate)]))) %>% 
  ungroup()

# view(lat_data_to_plot)

# plotting the latitudinal data
ggplot(data = lat_data_to_plot,
       aes(x = estimate, y = species, color = species)) +
  geom_point() +
  geom_errorbarh(aes(xmin = conf.low, xmax = conf.high),
                 height = 0.2) +
  geom_vline(xintercept = 0, linetype = "dashed") +
  labs(x = "Estimate (95% CI) of effect of year on latitude gCOB",
       y = "Species",
       title = "2010-2022 June, July, & August all latitudinal trends in gCOBs") +
  theme_minimal() +
  theme(legend.position = "none",
        axis.text.y = element_text(size = 7, face = "italic")) +    # change font size here
  facet_wrap(~climate_zone, scales = "free_y") +
      # scale_colour_viridis_d() +
  scale_y_discrete(labels = function(x) str_to_sentence(x))   # convert from all caps species names here


# saving the plot as a pdf
ggsave("plots/all_lat_shifts_yr2010_2022_m678_.pdf", width = 6.5, height = 11)

```


### Plotting the LONGITUDINAL Data

```{r}

# dataframe without the Intercept terms
long_data_to_plot <- long_models_df_yr2010_2022_m678 %>% 
  filter(term != "(Intercept)") %>% 
  group_by(climate_zone) %>% 
  mutate(species = factor(species, levels = unique(species[order(estimate)]))) %>% 
  ungroup()

# view(long_data_to_plot)

# plotting the longitudinal data
ggplot(data = long_data_to_plot,
       aes(x = estimate, y = species, color = species)) +
  geom_point() +
  geom_errorbarh(aes(xmin = conf.low, xmax = conf.high),
                 height = 0.2) +
  geom_vline(xintercept = 0, linetype = "dashed") +
  labs(x = "Estimate (95% CI) of effect of year on longitude gCOB",
       y = "Species",
       title = "2010-2022 June, July, & August all longitudinal trends in gCOBs") +
  theme_minimal() +
  theme(legend.position = "none",
        axis.text.y = element_text(size = 7, face = "italic")     # change font size here
        ) +
  facet_wrap(~climate_zone, scales = "free_y") +
    # scale_colour_viridis_d() +
  scale_y_discrete(labels = function(x) str_to_sentence(x))   # convert from all caps species names here


# saving the plot as a pdf
ggsave("plots/all_long_shifts_yr2010_2022_m678.pdf", width = 6.5, height = 11)

```



### Extracting species that show a significant shift in latitude or longitudinal gCOB over time

#### Latitude
```{r}

# dataframe without the Intercept terms & with column to indicate significant trends
signif_lat_data_to_plot <- lat_models_df_yr2010_2022_m678 %>% 
  filter(term != "(Intercept)") %>% 
  mutate(signif_95CI = ifelse(conf.low < 0 & conf.high > 0, "not significant", "significant")) %>% 
  mutate(signif_pvalue = ifelse(p.value < 0.05, "significant", "not significant"))

# view(signif_lat_data_to_plot)

## keep only significant species data
signif_lat_data_to_plot <- signif_lat_data_to_plot %>% 
  filter(signif_95CI == "significant") %>% 
  group_by(climate_zone) %>% 
  mutate(species = factor(species, levels = unique(species[order(estimate)]))) %>% 
  ungroup()

## plot the data
ggplot(data = signif_lat_data_to_plot,
       aes(x = estimate, y = species, color = species)) +
  geom_point() +
  geom_errorbarh(aes(xmin = conf.low, xmax = conf.high),
                 height = 0.2) +
  geom_vline(xintercept = 0, linetype = "dashed") +
  labs(x = "Estimate (95% CI) of effect of year on latitude gCOB",
       y = "Species",
       title = "2010-2022 June, July, & August significant latitudinal shifts in gCOBs") +
  theme_minimal() +
  theme(legend.position = "none",
        axis.text.y = element_text(size = 7, face = "italic")) +
  facet_wrap(~climate_zone, scales = "free_y") +
    # scale_colour_viridis_d() +
  scale_y_discrete(labels = function(x) str_to_sentence(x))

ggsave("plots/signif_lat_shifts_yr2010_2022_m678.pdf", width = 7.5, height = 6)


```


#### Longitude
```{r}

# dataframe without the Intercept terms & with column to indicate significant trends
signif_long_data_to_plot <- long_models_df_yr2010_2022_m678 %>% 
  filter(term != "(Intercept)") %>% 
  mutate(signif_95CI = ifelse(conf.low < 0 & conf.high > 0, "not significant", "significant")) %>% 
  mutate(signif_pvalue = ifelse(p.value < 0.05, "significant", "not significant"))


# view(signif_long_data_to_plot)


## keep only significant species data (##and prepare term_position - not doing this part anymore)
signif_long_data_to_plot <- signif_long_data_to_plot %>%
  filter(signif_95CI == "significant") %>%
  group_by(climate_zone) %>%
  # arrange(desc(estimate)) %>%
  # mutate(term_position = row_number()) %>%
  # mutate(term_position = factor(term_position)) %>% 
  mutate(species = factor(species, levels = unique(species[order(estimate)]))) %>% 
  ungroup()

## plot the data
ggplot(data = signif_long_data_to_plot,
       aes(x = estimate, y = species, color = species)) +
  geom_point() +
  geom_errorbarh(aes(xmin = conf.low, xmax = conf.high),
                 height = 0.2) +
  geom_vline(xintercept = 0, linetype = "dashed") +
  labs(x = "Estimate (95% CI) of effect of year on longitude gCOB",
       y = "Species",
       title = "2010-2022 June, July, & August significant longitudinal shifts in gCOBs") +
  theme_minimal() +
  theme(legend.position = "none",
        axis.text.y = element_text(size = 7, face = "italic")) +
  facet_wrap(~climate_zone, scales = "free_y") +
    # scale_colour_viridis_d() +
  scale_y_discrete(labels = function(x) str_to_sentence(x))



ggsave("plots/signif_long_shifts_yr2010_2022_m678.pdf", width = 9, height = 6)


```





## Alternative way of making figures - first group by climate zone and then make individual figures and then combine them into panels using cowplot or ???

```{r}

# # 3. group by climate zone information...
# tropical_sp <- climate_gCOB_trends_slim %>% 
#   filter(climate_zone == "tropical")
# 
# subtropical_sp <- climate_gCOB_trends_slim %>% 
#   filter(climate_zone == "subtropical")
# 
# deepwater_sp <- climate_gCOB_trends_slim %>% 
#   filter(climate_zone == "deep-water")

```


