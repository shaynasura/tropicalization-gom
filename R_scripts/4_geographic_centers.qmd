---
title: "4_geographic_centers"
author: "Shayna A. Sura"
format: pdf
---



```{r setup}

library(tidyverse) # includes and loads the packages listed below
# library(readr)
# library(tidyr)
# library(dplyr)
# library(ggplot2)
# library(lubridate)

library(here) # helps with paths for files

library(purrr)

library(rvest) #for web scraping
library(xml2)
library(stringr)

```



```{r reading in cleaned bio data}
#| echo: false
#| message: false

bio_data_clean <- read_csv(file = "data/clean_data/bio_data.csv")

yr2010_2022_m678_bio_data_clean <- read_csv(file = "data/clean_data/yr2010_2022_m678_bio_data.csv")

# head(bio_data_clean)

```


```{r lionfish data subset}

lionfish_data <- bio_data_clean %>% 
  filter(GENUS_BGS == "PTEROIS")

## need to add zeroes to the lionfish data for the years before it was detected and any years it wasn't detected when surveys were done.
survey_years <- data.frame("YR" = sort(unique(bio_data_clean$YR)))
# survey_years

## need to add zeroes to the lionfish data for the SURVEY STATIONS within each year where lionfish were NOT detected...


## Do a right join to the survey_years work for adding zeroes to the lionfish_data to get the animation to show the blank years.
# lionfish_data <- lionfish_data %>% 
#   right_join(survey_years, join_by(YR))

```



```{r calculate gCOB for lionfish}

# create an empty list to store cg dataframe
species_gCOBs <- list()

# create an empty data frame to store calculate gCOB values in
cg <- data.frame(year = unique(lionfish_data$YR),
                 latitude = NA,
                 longitude = NA)

# determine the unique years for which lionfish data exist
unique_years <- unique(lionfish_data$YR)


# for loop to calculate gCOB values for each year in which lionfish data exist
for(i in 1:length(unique(lionfish_data$YR))) {
  filtered_data <- filter(lionfish_data, YR == unique_years[i])
  
  # Check if the filtered dataset is not empty
  if(nrow(filtered_data) > 0) {
    cg$latitude[i] <- sum(filtered_data$DECSLAT * filtered_data$SELECT_BGS) / sum(filtered_data$SELECT_BGS)
    cg$longitude[i] <- sum(filtered_data$DECSLON * filtered_data$SELECT_BGS) / sum(filtered_data$SELECT_BGS)
  } else {
    # If the filtered dataset is empty, assign NA to latitude and longitude
    cg$latitude[i] <- NA
    cg$longitude[i] <- NA
  }
}

species_gCOBs[["lionfish_gCOB_test"]] <- cg

species_gCOBs[["lionfish_gCOB_test"]]

```



```{r function to calculate gCOB for species}

# create an empty list to store cg dataframe
species_gCOBs <- list()
yr2010_2022_m687_gCOBs <- list()



# function to calculate gCOBs for fish species
fish_calculate_gCOB <- function(data = bio_data_clean,
                                output_name = "species_gCOBs",
                                taxonomic_column = "new_TAXON",
                                # taxonomic_column = "TAXONOMIC",
                                common_name_column = "common_name",
                                species_name)
  {
  species_data <- data %>% 
    filter(if_any(all_of(taxonomic_column), ~ toupper(.) == toupper(species_name)))
  
  # Check if there is data for the specified species
  if (nrow(species_data) == 0) {
    stop(paste("No data found for species:", species_name))
  }
  
  # determine the specific years where fish appeared in trawl(s)
  unique_years <- unique(species_data$YR)

  # initiate empty data frame to store data in
  cg <- data.frame(year = unique_years,
                   latitude = NA,
                   longitude = NA)

  # for loop to calculate gCOB latitude and longitude for each year when fish appeared in trawl(s)
  for(i in 1:length(unique_years)) {
    filtered_data <- filter(species_data, YR == unique_years[i])

    # Check if the filtered dataset is not empty
    if(nrow(filtered_data) > 0) {
      cg$latitude[i] <- sum(filtered_data$DECSLAT * filtered_data$SELECT_BGS) / sum(filtered_data$SELECT_BGS)
      cg$longitude[i] <- sum(filtered_data$DECSLON * filtered_data$SELECT_BGS) / sum(filtered_data$SELECT_BGS)
    } else {
      # If the filtered dataset is empty, assign NA to latitude and longitude
      cg$latitude[i] <- NA
      cg$longitude[i] <- NA
    }}

  # Order the cg dataframe by time / years
  cg <- cg %>% arrange(year)
  
  # Get the existing list from the global environment
  # global_species_gCOBs <- get("species_gCOBs", envir = .GlobalEnv)
    global_species_gCOBs <- get(output_name, envir = .GlobalEnv)
  
  # Assign the cg dataframe with gCOB values the name of the fish species and add to the global_species_gCOBs list
  global_species_gCOBs[[paste(species_name, "_gCOB", sep = "")]] <- cg
  
  # Assign the modified list back to the global environment
  # assign("species_gCOBs", global_species_gCOBs, envir = .GlobalEnv)
    assign(output_name, global_species_gCOBs, envir = .GlobalEnv) 

  # # Assign the cg dataframe with gCOB values to a variable with a name that includes the species name
  # assign(paste(species_name, "_gCOB", sep = ""), cg, envir = .GlobalEnv)

  # Return the cg dataframe
  return(cg)
  
}


```




```{r testing the gCOB function with individual species}

## testing the function

fish_calculate_gCOB(bio_data_clean,
                    taxonomic = "GENUS_BGS",
                    species_name = "Pterois")



Epinephelus_morio_gCOBs <- list()

fish_calculate_gCOB(yr2010_2022_m678_bio_data_clean,
                    output_name = "Epinephelus_morio_gCOBs",
                    taxonomic = "new_TAXON",
                    species_name = "Epinephelus morio")


# PSEUDOBATOS LENTIGINOSUS
Pseudobatos_lentiginosus_gCOBs <- list()

fish_calculate_gCOB(yr2010_2022_m678_bio_data_clean,
                    output_name = "Pseudobatos_lentiginosus_gCOBs",
                    taxonomic = "new_TAXON",
                    species_name = "Pseudobatos lentiginosus")


fish_calculate_gCOB(yr2010_2022_m678_bio_data_clean,
                    output_name = "Epinephelus_morio_gCOBs",
                    taxonomic = "new_TAXON",
                    species_name = "Pseudobatos lentiginosus")

```

## Import list of refined fish species taxonomic names from R script "3_species_info" to use here

```{r import list of refined fish species taxonomic names}

## TO DO ##


```




## Applying the gCOB function to all the unique fish species identified in the dataset

```{r appy gCOB function to each unique fish species - calculate gCOB for all fish species}

# create an empty list to store cg dataframe
species_gCOBs <- list()


# Apply the fish_calculate_gCOB function to each unique species and combine results into a list
result_list <- map(species_list, ~ fish_calculate_gCOB(taxonomic_column = "new_TAXON", species_name = .))


# Applying the gCOB calculate function to each unique species for the dataset only containing 2010 - 2022 data

post2010_species_list # set up in 3_species_info script
yr2010_2022_m678_species_list # set up in 3_species_info script


# ## species list for 2010 - 2022 summer months (6,7,8) data only
# yr2010_2022_m678_species_df <- yr2010_2022_m678_bio_data_clean %>% 
#   select(new_TAXON, RANK) %>% 
#   filter(RANK == "SPECIES") %>% 
#   distinct(new_TAXON, .keep_all = TRUE) %>% 
#   arrange(new_TAXON)
# 
# dim(yr2010_2022_m678_species_df) # 513 unique taxonomic names
# yr2010_2022_m678_species_list <- yr2010_2022_m678_species_df$new_TAXON
# length(yr2010_2022_m678_species_list) # 513 unique taxonomic names


# create an empty list to store cg dataframe
yr2010_2022_m678_gCOBs <- list()


# I don't know why this doesn't work....but using lapply() below does work.
result_list_yr2010_2022_m678 <- map(yr2010_2022_m678_species_list, ~fish_calculate_gCOB(data = yr2010_2022_m678_bio_data_clean,
                                                                                        output_name = "yr2010_2022_m678_gCOBs",
                                                                                        taxonomic_column = "new_TAXON",
                                                                                        common_name_column = "new_TAXON",
                                                                                        species_name = .))



# # use this code...actually don't use this code because it create lists within lists which can't be used moving forward...
# yr2010_2022_m687_gCOBs <- lapply(yr2010_2022_m687_species_list, function(species_name) {
#   fish_calculate_gCOB(data = yr2010_2022_m678_clean_bio_data,
#                       output_name = "yr2010_2022_m687_gCOBs",
#                       taxonomic_column = "new_TAXON",
#                       common_name_column = "new_TAXON",
#                       species_name = species_name)
# })


```


## Pulling results of calculated gCOBs for individual species from species_gCOBs list - NEED TO UPDATE CODE TO PULL RESULTS FROM OTHER gCOBs LISTS OF RESULTS

```{r access gCOB values for individual species}

## pull results for individual species
# Convert the species names to lowercase for case-insensitive matching
species_name <- tolower("Epinephelus morio")
 # 	ALUTERUS SCHOEPFII

species_name <- tolower("ALUTERUS SCHOEPFII")

# Find the index corresponding to the species name (case-insensitive)
index <- which(grepl(species_name, tolower(names(species_gCOBs))))

if (length(index) == 0) {
  # If no match is found, print an error message
  print("Species not found in the result list.")
} else {
  # Access the result for the first matching species
  species_gCOBs[[index[1]]]
  # species_result <- species_gCOBs[[index[1]]]
}

# species_result



# Access the result for a specific species by its taxonomic name
# Convert the species names to lowercase for case-insensitive matching
species_name <- tolower("Epinephelus morio")

# Access the result for a specific species by its taxonomic name (case-insensitive)
species_result <- species_gCOBs[[which(tolower(names(species_gCOBs)) == species_name)]]

# Get the list of species names from the species_gCOBs list
# names(species_gCOBs)
species_names <- names(species_gCOBs)

```





```{r test for linear trends of gCOB for lionfish}

ggplot(cg, aes(longitude, latitude)) +
  geom_point(aes(colour = year),
                 size = 5
             )


ggplot(cg, aes(year, longitude)) +
  geom_point() +
  geom_smooth(method = lm,
              level = 0.95,
              col = "purple",
              linewidth = 2)


ggplot(cg, aes(year, latitude)) +
  geom_point() +
  geom_smooth(method = lm,
              level = 0.95,
              col = "purple",
              linewidth = 2)


lat_model <- lm(latitude ~ year, data = cg)
summary(lat_model)


long_model <- lm(longitude ~ year, data = cg)
summary(long_model)


```



```{r function run linear models in gCOB latitude and longitudes over time}

# initiate empty data frame to store data in
# gCOB_trends <- data.frame(species = NA,
#                           latitude_year_coef = NA,
#                           latitude_year_SE = NA,
#                           latitude_pvalue = NA,
#                           latitude_rsquared = NA,
#                           latitude_rsquared_adj = NA,
#                           longitude_year_coef = NA,
#                           longitude_year_SE = NA,
#                           longitude_pvalue = NA,
#                           longitude_rsquared = NA,
#                           longitude_rsquared_adj = NA)


# function to run linear models on gCOB latitude and longitude values over time to test for shifts
test_gCOBs_over_time <- function(species_name,
                                 input_gCOBs,
                                 output_df_name)
{
  species <- tolower(species_name)
  
  # Find the index corresponding to the species name (case-insensitive)
  # index <- which(grepl(species, tolower(names(species_gCOBs))))
    index <- which(grepl(species, tolower(names(input_gCOBs))))
  
  if (length(index) == 0) {
    # If no match is found, print an error message
    print("Species not found in the input_gCOBs list.")
  } else {
    # Access the result for the first matching species
    # species_result <- species_gCOBs[[index[1]]]
    species_result <- input_gCOBs[[index[1]]]
  }
  
  
  internal_gCOB_trends <- data.frame(species = NA,
                                     latitude_year_coef = NA,
                                     latitude_year_SE = NA,
                                     latitude_pvalue = NA,
                                     latitude_rsquared = NA,
                                     latitude_rsquared_adj = NA,
                                     longitude_year_coef = NA,
                                     longitude_year_SE = NA,
                                     longitude_pvalue = NA,
                                     longitude_rsquared = NA,
                                     longitude_rsquared_adj = NA)
  
  # put species name in first column
  internal_gCOB_trends$species <- toupper(species_name)
  
  
  # Check if there are any non-NA values in the data frame
  if (all(is.na(species_result$latitude)) || all(is.na(species_result$longitude))) {
    # If there are only NAs in the data frame, assign NA to all values
    internal_gCOB_trends$latitude_year_coef <- NA
    internal_gCOB_trends$latitude_year_SE <- NA
    internal_gCOB_trends$latitude_pvalue <- NA
    internal_gCOB_trends$latitude_rsquared <- NA
    internal_gCOB_trends$latitude_rsquared_adj <- NA
    internal_gCOB_trends$longitude_year_coef <-NA
    internal_gCOB_trends$longitude_year_SE <- NA
    internal_gCOB_trends$longitude_pvalue <- NA
    internal_gCOB_trends$longitude_rsquared <- NA
    internal_gCOB_trends$longitude_rsquared_adj <- NA
  } else {
  
    # fit linear models testing for trends in latitude and longitude of gCOBs over time
    lat_model <- lm(latitude ~ year, data = species_result)
    long_model <- lm(longitude ~ year, data = species_result)
    
    # Check if the models produced valid results
    if(is.na(coef(lat_model)[["year"]]) == TRUE) {
      # If the coefficient for the year predictor is NA (meaning only one data point), assign NA to all values
      internal_gCOB_trends$latitude_year_coef <- NA
      internal_gCOB_trends$latitude_year_SE <- NA
      internal_gCOB_trends$latitude_pvalue <- NA
      internal_gCOB_trends$latitude_rsquared <- NA
      internal_gCOB_trends$latitude_rsquared_adj <- NA
    } else {
      # Pull out important result values from the linear model summary
      internal_gCOB_trends$latitude_year_coef <- lat_model$coefficients[["year"]]
      internal_gCOB_trends$latitude_year_SE <- coef(summary(lat_model))[["year","Std. Error"]]
      internal_gCOB_trends$latitude_pvalue <- coef(summary(lat_model))["year", "Pr(>|t|)"]
      internal_gCOB_trends$latitude_rsquared <- summary(lat_model)$r.squared
      internal_gCOB_trends$latitude_rsquared_adj <- summary(lat_model)$adj.r.squared
    }
    
    if(is.na(coef(long_model)[["year"]]) == TRUE) {
      # If the coefficient for the year predictor is NA (meaning only one data point), assign NA to all values
      internal_gCOB_trends$longitude_year_coef <-NA
      internal_gCOB_trends$longitude_year_SE <- NA
      internal_gCOB_trends$longitude_pvalue <- NA
      internal_gCOB_trends$longitude_rsquared <- NA
      internal_gCOB_trends$longitude_rsquared_adj <- NA
    } else {
      # Pull out important result values from the linear model summary
      internal_gCOB_trends$longitude_year_coef <- long_model$coefficients[["year"]]
      internal_gCOB_trends$longitude_year_SE <- coef(summary(long_model))[["year","Std. Error"]]
      internal_gCOB_trends$longitude_pvalue <- coef(summary(long_model))["year", "Pr(>|t|)"]
      internal_gCOB_trends$longitude_rsquared <- summary(long_model)$r.squared
      internal_gCOB_trends$longitude_rsquared_adj <- summary(long_model)$adj.r.squared
    }
  }
  
  
  
  # Get the existing dataframe from the global environment
  # global_gCOB_trends <- get("gCOB_trends", envir = .GlobalEnv) 
    global_gCOB_trends <- get(output_df_name, envir = .GlobalEnv) 
  
  # Assign the cg dataframe with gCOB values the name of the fish species and add to the global_gCOB_trends dataframe
  global_gCOB_trends <- rbind(global_gCOB_trends, internal_gCOB_trends)
  
  # Assign the modified dataframe back to the global environment
  assign(output_df_name, global_gCOB_trends, envir = .GlobalEnv)
  
  return(internal_gCOB_trends)
  
}


```


## Applying the gCOB trends function to all the unique fish species identified in the dataset

```{r appy test_gCOBs_over_time function to each unique fish species - test for trends in gCOBs for all species}

# initiate empty data frame to store data in
gCOB_trends <- data.frame(species = NA,
                          latitude_year_coef = NA,
                          latitude_year_SE = NA,
                          latitude_pvalue = NA,
                          latitude_rsquared = NA,
                          latitude_rsquared_adj = NA,
                          longitude_year_coef = NA,
                          longitude_year_SE = NA,
                          longitude_pvalue = NA,
                          longitude_rsquared = NA,
                          longitude_rsquared_adj = NA)


# Apply the test_gCOBs_over_time function to each unique species and combine results into a dataframe
individual_trends_results <- map(species_list, ~ test_gCOBs_over_time(species_name = .))

# write_csv(gCOB_trends, file = "output/all_species_gCOB_data_v1.csv")



# post2010_gCOB_trends <- data.frame(species = NA,
#                           latitude_year_coef = NA,
#                           latitude_year_SE = NA,
#                           latitude_pvalue = NA,
#                           latitude_rsquared = NA,
#                           latitude_rsquared_adj = NA,
#                           longitude_year_coef = NA,
#                           longitude_year_SE = NA,
#                           longitude_pvalue = NA,
#                           longitude_rsquared = NA,
#                           longitude_rsquared_adj = NA)


post2010_individual_trends_results <- map(post2010_species_list, ~ test_gCOBs_over_time(species_name = .))


# write_csv(gCOB_trends, file = "output/post2010_gCOB_data_v1.csv")

```


```{r apply gCOB trends function to yr2010_2022_m678_gCOBs}

# initiate empty data frame to store data in
yr2010_2022_m678_gCOBs_trends <- data.frame(species = NA,
                                            latitude_year_coef = NA,
                                            latitude_year_SE = NA,
                                            latitude_pvalue = NA,
                                            latitude_rsquared = NA,
                                            latitude_rsquared_adj = NA,
                                            longitude_year_coef = NA,
                                            longitude_year_SE = NA,
                                            longitude_pvalue = NA,
                                            longitude_rsquared = NA,
                                            longitude_rsquared_adj = NA)


# apply function
yr2010_2022_m678_gCOBs_trends_results <- map(yr2010_2022_m678_species_list,
                                             ~ test_gCOBs_over_time(species_name = .,
                                                                    input_gCOBs = yr2010_2022_m678_gCOBs,
                                                                    output_df_name = "yr2010_2022_m678_gCOBs_trends"))



# yr2010_2022_m678_gCOBs_trends_results <- lapply(yr2010_2022_m678_species_list, function(species_name) {
#   test_gCOBs_over_time(species_name = species_name,
#                        input_gCOBs = yr2010_2022_m687_gCOBs,
#                        output_df_name = "yr2010_2022_m678_gCOBs_trends")
# })


# export results as csv file
write_csv(yr2010_2022_m678_gCOBs_trends, file = "output/yr2010_2022_m678_gCOBs_trends_raw.csv")

```





## NEXT - Summarize results from all the linear models...

- join the information about climate zone for the various fish species into the linear model results
- remove those fish species that don't have any or enough data for testing for linear trends over time
- group table by climate zone preferences
- explore results! ...how exactly?
  - start by examining frequency of latitude models with p-values < 0.05 indicating a significant trend over time
  - examine frequency of longitude models with p-values < 0.05 (indicating a significant trend over time)

## Double check these meanings with someone else!!! ##
- Latitude Meanings
  - positive coefficient estimate for latitude indicates northward shift.
  - negative coefficient estimate for latitude indicates southward shift.
- Longitude Meanings
  - positive coefficient estimate for longitude indicates eastward shift.
  - negative coefficient estimate for longitude indicates westward shift.


```{r}

species_climate_df <- read_csv(file = "output/species_climate_data.csv")
gCOB_trends_data <- yr2010_2022_m678_gCOBs_trends # update this to reflect the gCOB trends dataframe to use here


# 1. join climate zone information to gCOB_trends
climate_gCOB_trends <- gCOB_trends_data %>% 
  rename(species_name = species) %>% 
  left_join(species_climate_df, join_by(species_name))

# 2. remove fish species who cannot have trends examined over time
climate_gCOB_trends_slim <- climate_gCOB_trends %>% 
  filter(latitude_pvalue != "NA") %>% 
  filter(latitude_pvalue != "NaN")


# 3. group by climate zone information...
tropical_sp <- climate_gCOB_trends_slim %>% 
  filter(climate_zone == "tropical")

subtropical_sp <- climate_gCOB_trends_slim %>% 
  filter(climate_zone == "subtropical")

deepwater_sp <- climate_gCOB_trends_slim %>% 
  filter(climate_zone == "deep-water")


significant_pvalues <- climate_gCOB_trends_slim %>% 
  group_by(climate_zone) %>% 
  summarize(n = n(),
            num_sig_pvalues_lat = length(which(latitude_pvalue < 0.05)),
            num_sig_pvalues_long = length(which(longitude_pvalue < 0.05)),
            num_sig_lat_shift_north = length(which(latitude_pvalue < 0.05 & latitude_year_coef > 0)),
            num_sig_lat_shift_south = length(which(latitude_pvalue < 0.05 & latitude_year_coef < 0)),
            num_sig_long_shift_west = length(which(longitude_pvalue < 0.05 & longitude_year_coef < 0)),
            num_sig_long_shift_east = length(which(longitude_pvalue < 0.05 & longitude_year_coef > 0))
  )
            
significant_pvalues

# write_csv(significant_pvalues, file = "output/gCOB_trends_v1.csv")
# write_csv(significant_pvalues, file = "output/post2010_gCOB_trends_v1.csv")
write_csv(significant_pvalues, file = "output/yr2010_2022_m678_gCOB_trends_summary.csv")



```

 
## Make figures to examine for trends


### Make figures showing the regression coefficients...

```{r plotting linear regression slopes across fish species}

# 1. join climate zone information to gCOB_trends
climate_gCOB_trends <- gCOB_trends_data %>% 
  rename(species_name = species) %>% 
  left_join(species_climate_df, join_by(species_name))
  

ggplot(data = climate_gCOB_trends,
       mapping = aes(x = ))

```




```{r}


ggplot(data = climate_gCOB_trends_slim,
       mapping = aes(x = latitude_pvalue,
                     fill = climate_zone)) +
  geom_histogram(binwidth = 0.005) +
  geom_vline(aes(xintercept = 0.05), color = "red", linewidth = 1) +
  # xlim(0,0.1) +
  # ylim(0,20) + 
  facet_wrap(~climate_zone)



ggplot(data = climate_gCOB_trends_slim,
       mapping = aes(x = longitude_pvalue,
                     fill = climate_zone)) +
  geom_histogram(binwidth = 0.01) +
  facet_wrap(~climate_zone)


```


```{r}

ggplot(data = climate_gCOB_trends_slim,
       mapping = aes(x = latitude_year_coef,
                     fill = climate_zone)) +
  geom_histogram() +
  geom_vline(aes(xintercept = 0), color = "red", linewidth = 1) +
  # xlim(0,0.1) +
  # ylim(0,20) + 
  facet_wrap(~climate_zone)

```


