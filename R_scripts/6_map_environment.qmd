---
title: "6_map_environment"
author: "Shayna A. Sura"
format: html
---

## 


```{r load packages}
#| echo: false
#| message: false

library(tidyverse) # includes and loads the packages listed below
# library(readr)
# library(tidyr)
# library(dplyr)
# library(ggplot2)
# library(lubridate)

library(here) # helps with paths for files

# libraries for spatial data & animating it...
library(maps)
library(ggmap)
library(gganimate)
library(gifski) # for gif output
library(av) # for video output
library(png)
library(tools)

# not sure I need these libraries for what I'm trying to do.
# library(terra)
# library(geodata)
# library(predicts)

```





```{r reading in cleaned bio data}
#| echo: false
#| message: false

bio_data_clean <- read_csv(file = "data/clean_data/bio_data.csv")

# head(bio_data_clean)

```

## obtain bounding coordinates for making maps

```{r}
#| echo: false
#| message: false

# Determine geographic extent of our data
# use ceiling() and floor() to round up and down to the nearest integer

max_lat <- ceiling(max(bio_data_clean$DECSLAT))
min_lat <- floor(min(bio_data_clean$DECSLAT))
max_long <- ceiling(max(bio_data_clean$DECSLON))
min_long <- floor(min(bio_data_clean$DECSLON))

# geo_extent <- ext(x = c(min_long,
#                         max_long,
#                         min_lat,
#                         max_lat))

```







```{r obtain GoM map}
#| echo: false
#| message: false


gulf_of_mexico_info <- map_data("usa", region = ".")
world_base_map <- map_data("world", region = ".")
usa_state_borders <- map_data("state", region = ".")

# base_map <- ggplot(data = gulf_of_mexico_info,
#                    mapping = aes (x = long, y = lat, group = group)) +
#   geom_polygon() +
#   coord_quickmap(xlim = c(min_long, max_long),
#                  ylim = c(min_lat, max_lat)) +
#   theme_void()


base_map <- ggplot(data = world_base_map,
                   mapping = aes (x = long, y = lat, group = group)) +
  geom_polygon(color = "black",
               fill = "white") +
  geom_polygon(data = usa_state_borders,
               color = "black",
               fill = "white") + 
  # coord_quickmap(xlim = c(min_long, max_long),
  #                ylim = c(min_lat, max_lat)) +
  coord_quickmap(xlim = c(-97.7, -79.9),
                 ylim = c(24, 31)) +
  theme(panel.background = element_rect(fill = c("#CFEFFF")),
        panel.border = element_rect(fill = NA,
                                    color = "black")
        ) +
  labs(x = "Longitude",
       y = "Latitude")


# base_map

# theme_void().  #EBF9FF #B3E5FC

#             (left = -98.438,
#              bottom = 12.082,
#              right = -79.519,
#              top = 33.505)

```


### Revise these maps and use the STAREC.csv raw data instead of the biological data to prevent duplication of temperature data points - because, currently, I am plotting the temperature data for each trawl multiple times (i.e., for each species caught in that trawl).

```{r}

temperature_map <- base_map +
  geom_point(data = bio_data_clean,
             na.rm = TRUE,      ## need to figure out why this is not working here - probably need to move this to a different location to specify which column to use for removing NA values
             aes(x = DECSLON,
                 y = DECSLAT,
                 group = NA,
                 fill = TEMP_SSURF),
             size = 1.5,
             shape = 21,
             color = "black",
             stroke = 0.1) +
    # scale_fill_gradient(colours = "viridis",
    #                    #  low = "white",
    #                    # high = "red",
    #                    limits = c(5, 35),
    #                    # breaks = c(),
    #                    # labels = c(),
    #                    name = "Temperature\nCelsius") +
  scale_fill_viridis_b(limits = c(5,35),
                       name = "Temperature\nCelsius") +
  theme(text = element_text(family = "Times",
                            size = 14),
        plot.title = element_text(face = "bold"),
        axis.title = element_text(size = 12,
                                  face = "bold"),
        axis.text = element_text(size = 10),
        legend.title = element_text(size = 12,
                                    face = "bold",
                                    hjust = 0.5),
        legend.text = element_text(size = 10)) +
  facet_wrap(~YR)


temperature_map

```





